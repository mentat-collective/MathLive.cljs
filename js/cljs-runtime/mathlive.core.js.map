{"version":3,"sources":["mathlive/core.cljs"],"mappings":"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","names":["mathlive.core/update-options!","mf","opts-or-f","updated","cljs.core/fn?","cljs.core.js__GT_clj","G__65754","cljs.core/map?","js/Error","cljs.core/clj->js","mathlive.core/mathlive-version","js/module$node_modules$mathlive$dist$mathlive_min.version","mathlive.core/cdn-sounds","mathlive.core/cdn-fonts","mathlive.core/->math-json","temp__5753__auto__","e","var_args","G__65756","mathlive.core/->placeholders","p__65759","map__65760","cljs.core/--destructure-map","cljs.core.get","mathlive.core.__GT_placeholders","type","m","cljs.core.reduce","acc","k","field","mathlive.core.goog$module$goog$object.get","v","cljs.core._EQ_","cljs.core.assoc","cljs.core.keyword","cljs.core/js-keys","mathlive.core/math-json->tex","expr","js/module$node_modules$mathlive$dist$mathlive_min.serializeMathJsonToLatex","mathlive.core/set-math-json!","mathlive.core/Mathfield","reagent.core/adapt-react-class","js/module$node_modules$react$index.forwardRef","props","ref","vec__65763","cljs.core.nth","map__65766","set-mf","js/module$node_modules$react$index.useState","children","value","options","defaultValue","onChange","onPlaceholderChange","js/module$node_modules$react$index.useEffect","js/console.error","and__4251__auto__","opt-ref","js/module$node_modules$react$index.useRef","cljs.core.not_EQ_","js/module$node_modules$react$index.useImperativeHandle","reagent.core.as_element","cljs.core.dissoc","or__4253__auto__"],"sourcesContent":["(ns mathlive.core\n  \"Reagent component wrapping the `math-field` web component from\n  the [Mathlive](https://cortexjs.io/docs/mathlive) project, along with\n  associated utilities.\"\n  (:require [goog.object :as obj]\n            [reagent.core :as r]\n            [\"mathlive\" :as ml]\n            [\"react\" :as react]))\n\n;; ## Utilities\n\n(defn- update-options!\n  \"Given a `MathfieldElement` `mf` and either a\n\n  - map of keyword-or-string => option\n  - function from Clojurized current options => new options\n\n  Calls [`mf.setOptions`](https://cortexjs.io/docs/mathlive/#(Mathfield%3Ainterface).setOptions)\n  with\n\n  - `opts-or-f` (if a map) or\n  - the result of `(opts-or-f (.getOptions mf))` if a function.\"\n  [mf opts-or-f]\n  (let [updated (cond\n                  (fn? opts-or-f)\n                  (-> (.getOptions mf)\n                      (js->clj :keywordize-keys true)\n                      (opts-or-f))\n                  (map? opts-or-f) opts-or-f\n                  :else (throw\n                         (js/Error.\n                          (str \"Invalid option for :options.\"\n                               \" must be fn or map.\"))))]\n    (.setOptions mf (clj->js updated))\n    nil))\n\n(def ^{:doc \"Currently loaded version of\nthe [mathlive](https://www.npmjs.com/package/mathlive) npm package.\"}\n  mathlive-version\n  (.-mathlive ml/version))\n\n(def ^{:doc \"Location of the `sounds` directory in the CDN-served package\n  of [mathlive](https://www.npmjs.com/package/mathlive).\"} cdn-sounds\n  (str \"https://unpkg.com/mathlive@\" mathlive-version \"/dist/sounds/\"))\n\n(def ^{:doc \"Location of the `fonts` directory in the CDN-served package\n  of [mathlive](https://www.npmjs.com/package/mathlive).\"} cdn-fonts\n  (str \"https://unpkg.com/mathlive@\" mathlive-version \"/dist/fonts/\"))\n\n(defn ->math-json\n  \"Given\n  a [`MathfieldElement`](https://cortexjs.io/docs/mathlive/#(MathfieldElement%3Aclass))\n  `mf`, returns a [MathJSON](https://cortexjs.io/math-json/)\n  representation (parsed into Clojure) of the currently displayed expression.\n\n  NOTE that for this or anything MathJSON related to work you'll need\n  to `(require '[@cortex-js/compute-engine])`. If this package isn't loaded,\n  returns `nil`.\"\n  [mf]\n  (when-let [e (.-expression ^js mf)]\n    (js->clj\n     (.-json e))))\n\n(defn ->placeholders\n  \"Given\n  a [`MathfieldElement`](https://cortexjs.io/docs/mathlive/#(MathfieldElement%3Aclass))\n  `mf`, returns a map of (string) placeholder name => current value of the\n  placeholder.\n\n  NOTE that for `{:type \\\"math-json\\\"}` to work you'll need to `(require\n  '[@cortex-js/compute-engine])`. If this option is specified and the package\n  isn't loaded, returns `nil` for each placeholder value.\"\n  ([mf] (->placeholders mf {}))\n  ([mf {:keys [type]\n        :or {type \"latex\"}}]\n   (let [m ^js (.-placeholders mf)]\n     (reduce (fn [acc k]\n               (let [field (obj/get m k)\n                     v (if (= type \"math-json\")\n                         (->math-json field)\n                         (.getValue field type))]\n                 (assoc acc (keyword k) v)))\n             {}\n             (js-keys m)))))\n\n(defn math-json->tex\n  \"Given a Clojure data structure `expr` representing\n  a [MathJSON](https://cortexjs.io/math-json/) expression, returns a string of\n  LaTeX representing `expr`.\n\n  NOTE that for this or anything MathJSON related to work you'll need\n  to `(require '[@cortex-js/compute-engine])`. If this package isn't loaded,\n  returns `nil`.\"\n  [expr]\n  (ml/serializeMathJsonToLatex\n   (clj->js expr)))\n\n(defn set-math-json!\n  \"Given\n\n  - a [`MathfieldElement`](https://cortexjs.io/docs/mathlive/#(MathfieldElement%3Aclass)) `mf` and\n  - a Clojure data structure `expr` representing a [MathJSON](https://cortexjs.io/math-json/) expression,\n\n  sets the value of `mf` to the TeX version of `expr`.\n\n  Equivalent to `(.setValue mf (math-json->tex expr))`.\n\n  NOTE that for this or anything MathJSON related to work you'll need\n  to `(require '[@cortex-js/compute-engine])`. If this package isn't loaded,\n  this command has no effect.\"\n  [mf expr]\n  (when (.-expression ^js mf)\n    (set! (.-expression ^js mf)\n          (clj->js expr))))\n\n;; ## Reagent Component\n;;\n;; This section contains a Reagent component that wraps the `math-field` web\n;; component. You can of course use a `math-field` directly:\n;;\n;; ```\n;; [:math-field {:on-input (fn [x] <do-something>)}\n;;  \"1+x\"]\n;; ```\n\n(def ^{:doc \"Reagent component around\n  the [MathLive](https://github.com/arnog/mathlive) equation editor.\n\n  NOTE: Following React's convention, `:on-change` binds a listener to to the\n `input` event. See https://reactjs.org/docs/dom-elements.html#onchange\"}\n  Mathfield\n  (r/adapt-react-class\n   (react/forwardRef\n    (fn [props ref]\n      (let [[mf set-mf] (react/useState nil)\n            {:strs [children value options defaultValue onChange\n                    onPlaceholderChange] :as props}\n            (js->clj props)]\n\n        ;; These effects run once on initial load (note the empty dependency\n        ;; array). They provide warnings similar to the warnings you see from a\n        ;; `:textarea`.\n        (react/useEffect\n         (fn mount []\n           (when children\n             (js/console.error\n              (str \"Warning: use the `:default-value` or `:value` \"\n                   \"props instead of setting children on `Mathfield`.\")))\n\n           (when (and defaultValue value)\n             (js/console.error\n              (str \"Warning: don't set both `:value` and `:default-value` props.\"\n                   \" `Mathfield`s must be either controlled or uncontrolled\"\n                   \" (specify either the `:value` prop, or the `:default-value` prop, but not both).\"\n                   \" Decide between using a controlled or uncontrolled `Mathfield` and remove one of these props.\"))))\n         #js [])\n\n        ;; NOTE We have to use this trick to prevent effects that depend on\n        ;; `options` from re-running on every re-render. This is because JS\n        ;; objects use reference equality, not value equality. This trick lets\n        ;; us only reset when the previous and next are `not=`, which uses\n        ;; Clojure's value equality comparison.\n        (let [opt-ref (react/useRef options)]\n          (when (not= (.-current opt-ref) options)\n            (set! (.-current opt-ref) options))\n\n          (react/useEffect\n           ;; Only run when the VALUE of `options` changes, not the reference.\n           (fn mount []\n             (when (and mf options)\n               (update-options! mf options)))\n           #js [(.-current opt-ref) mf]))\n\n        ;; This effect updates the value of the `Mathfield` if it's changed from\n        ;; somewhere else.\n        (react/useEffect\n         (fn []\n           (when (and mf value (not= (.getValue mf) value))\n             (.setValue mf value)))\n         #js [mf value])\n\n        ;; React doesn't pick up `:on-placeholder-change` so we intercept it and\n        ;; do the right thing here.\n        (react/useEffect\n         (fn mount []\n           (when (and mf onPlaceholderChange)\n             (.addEventListener mf \"placeholder-change\" onPlaceholderChange))\n           (fn unmount []\n             (when (and mf onPlaceholderChange)\n               (.removeEventListener mf \"placeholder-change\" onPlaceholderChange))))\n         #js [mf onPlaceholderChange])\n\n        ;; NOTE: For whatever reason, when the component is controlled, the\n        ;; component can't move its own cursor position well. So this handles\n        ;; the odd case at the very beginning... Thanks to [Chris\n        ;; Chudzicki](https://github.com/ChristopherChudzicki/math3d-next/blob/838369956a0bd1f126f8c04ef900eaf53741011c/client/src/util/components/MathLive/MathField.tsx#L52-L69)\n        ;; for figuring this one out.\n        (react/useEffect\n         (fn []\n           (when (and mf\n                      (.endsWith (.getValue mf) \"?\")\n                      (= 2 (.-position mf)))\n             (.executeCommand ^js mf \"moveToPreviousWord\"))))\n\n        ;; This passes `mf`back out to `ref` when it changes.\n        (react/useImperativeHandle ref (fn [] mf))\n\n        (r/as-element\n         [:math-field\n          (assoc (dissoc props \"onPlaceholderChange\" \"onChange\"\n                         \"defaultValue\" \"value\" \"options\")\n                 \"children\" (or value defaultValue \"\")\n                 \"ref\" set-mf\n                 \"onInput\" onChange)]))))))\n"]}