{"version":3,"sources":["nextjournal/clerk/viewer.cljc"],"mappings":"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","names":["this__4502__auto__","k__4503__auto__","this__4504__auto__","k70223","else__4505__auto__","G__70232","cljs.core/Keyword","form","cljs.core.get","__extmap","this__4522__auto__","f__4523__auto__","init__4524__auto__","cljs.core.reduce","ret__4525__auto__","p__70234","vec__70237","k__4526__auto__","cljs.core.nth","v__4527__auto__","this__4517__auto__","writer__4518__auto__","opts__4519__auto__","pr-pair__4520__auto__","keyval__4521__auto__","cljs.core/pr-sequential-writer","cljs.core.concat","cljs.core/PersistentVector","G__70222","cljs.core/RecordIter","cljs.core/-iterator","cljs.core/nil-iter","this__4500__auto__","__meta","this__4497__auto__","__hash","this__4506__auto__","cljs.core/count","this__4498__auto__","h__4360__auto__","coll__4499__auto__","cljs.core/hash-unordered-coll","this70224","other70225","cljs.core._EQ_","this__4512__auto__","k__4513__auto__","cljs.core/contains?","cljs.core.dissoc","cljs.core/-with-meta","cljs.core.into","cljs.core/not-empty","this__4509__auto__","G__70278","this__4510__auto__","k__4511__auto__","pred__70281","cljs.core/keyword-identical?","expr__70282","cljs.core.assoc","this__4515__auto__","cljs.core/seq","cljs.core/MapEntry","this__4501__auto__","this__4507__auto__","entry__4508__auto__","cljs.core/vector?","cljs.core/-nth","cljs.core/-conj","nextjournal.clerk.viewer/ViewerEval","this__4546__auto__","cljs.core/List","writer__4547__auto__","cljs.core/-write","G__70226","extmap__4542__auto__","G__70292","cljs.core/record?","nextjournal.clerk.viewer/->ViewerEval","nextjournal.clerk.viewer/map->ViewerEval","k70294","G__70309","f","p__70310","vec__70311","G__70293","this70295","other70296","G__70322","pred__70323","expr__70324","unused__21841__auto__","self__","G__70333","js/Error","args70307","cljs.core/aclone","nextjournal.clerk.viewer/ViewerFn","G__70297","G__70339","nextjournal.clerk.viewer/->ViewerFn","nextjournal.clerk.viewer/map->ViewerFn","this","x","fexpr__70336","y","fexpr__70338","nextjournal.clerk.viewer/viewer-fn?","nextjournal.clerk.viewer/viewer-eval?","nextjournal.clerk.viewer/resolve-symbol-alias","aliases","sym","temp__5751__auto__","full-ns","G__70342","cljs.core/namespace","cljs.core.symbol","cljs.core/name","nextjournal.clerk.viewer/resolve-aliases","p1__70343#","clojure.walk/postwalk","G__70344","cljs.core/Symbol","nextjournal.clerk.viewer/->viewer-fn","cljs.core/eval","nextjournal.clerk.viewer/->viewer-eval","nextjournal.clerk.viewer/open-graph-metas","open-graph-properties","cljs.core.map","p__70346","vec__70347","prop","content","cljs.core/PROTOCOL_SENTINEL","obj","w","opts","cljs.core.pr_str","nextjournal.clerk.viewer/data-readers","nextjournal.clerk.viewer/wrapped-value?","and__4251__auto__","cljs.core/map?","e70350","_e","var_args","G__70355","nextjournal.clerk.viewer/ensure-wrapped","v","nextjournal.clerk.viewer.ensure_wrapped","nextjournal.clerk.viewer/->value","nextjournal.clerk.viewer/->viewer","nextjournal.clerk.viewer/->viewers","nextjournal.clerk.viewer/width","nextjournal.clerk.viewer/css-class","nextjournal.clerk.viewer/viewer-opts-normalization","p1__70363#","cljs.core.keyword","nextjournal.clerk.viewer/throw-when-viewer-opts-invalid","cljs.core.ex_info","temp__5753__auto__","width","css-class","nextjournal.clerk.viewer/normalize-viewer-opts","clojure.set/rename-keys","nextjournal.clerk.viewer/normalize-viewer","viewer","cljs.core/seq?","cljs.core/fn?","G__70377","nextjournal.clerk.viewer/with-viewer","nextjournal.clerk.viewer.with_viewer","viewer-opts","cljs.core.merge","args__4870__auto__","len__4864__auto__","i__4865__auto__","argseq__4871__auto__","cljs.core/IndexedSeq","nextjournal.clerk.viewer/with-viewer-extracting-opts","seq70388","G__70389","cljs.core/first","cljs.core/next","self__4851__auto__","opts+items","cljs.core/not","cljs.core/rest","cljs.core/sequential?","cljs.core.apply","cljs.core.partial","nextjournal.clerk.viewer/with-viewers","viewers","G__70403","nextjournal.clerk.viewer/get-safe","p1__70401#","key","nextjournal.clerk.viewer.get_safe","map","e70404","nextjournal.clerk.viewer/rpad-vec","length","padding","cljs.core/vec","cljs.core.take","cljs.core.repeat","nextjournal.clerk.viewer/missing-pred","nextjournal.clerk.viewer/normalize-seq-of-seq","s","max-count","cljs.core/max-key","p1__70405#","cljs.core.mapv","nextjournal.clerk.viewer/normalize-seq-of-map","ks","cljs.core.mapcat","cljs.core/keys","cljs.core.distinct","m","p1__70406#","nextjournal.clerk.viewer/normalize-map-of-seq","m*","p__70412","vec__70413","acc","k","cljs.core.range","cljs.core/val","cljs.core.comp","i","p1__70411#","cljs.core.get_in","p__70426","map__70427","cljs.core/--destructure-map","nextjournal.clerk.viewer/normalize-seq-to-vec","head","rows","G__70428","nextjournal.clerk.viewer/use-headers","map__70435","table","cljs.core.update","nextjournal.clerk.viewer/normalize-table-data","data","cljs.core/vals","nextjournal.clerk.viewer/demunge-ex-data","ex-data","G__70448","traces","p1__70447#","cljs.core/demunge","cljs.core/pr-str","nextjournal.clerk.viewer/inspect-fn","p1__70453#","nextjournal.clerk.viewer/when-wrapped","G__70454","nextjournal.clerk.viewer/inspect-wrapped-value","wrapped-value","G__70455","nextjournal.clerk.viewer/apply-viewers","nextjournal.clerk.viewer/process-wrapped-value","nextjournal.clerk.viewer/mark-presented","nextjournal.clerk.viewer/mark-preserve-keys","nextjournal.clerk.viewer/fetch-all","_opts","_xs","nextjournal.clerk.viewer/datafied?","nextjournal.clerk.viewer/with-md-viewer","map__70459","node","type","nextjournal.clerk.viewer/into-markup","markup","p__70464","map__70465","p__70466","map__70467","text","G__70468","p1__70463#","G__70469","nextjournal.clerk.viewer/update-val","seq70473","G__70474","args","cljs.core/update","nextjournal.clerk.viewer/var-from-def?","cljs.core/var?","nextjournal.clerk.viewer/var-from-def-viewer","cljs.core/deref","p__70475","map__70476","nextjournal.clerk.viewer/apply-viewer-unwrapping-var-from-def","result","value","map__70477","value+viewer","unwrap-var","var-from-def?","G__70480","nextjournal.clerk.viewer/get-default-viewers","nextjournal.clerk.viewer/!viewers","nextjournal.clerk.viewer/default-viewers","G__70484","nextjournal.clerk.viewer/get-viewers","scope","nextjournal.clerk.viewer.get_viewers","or__4253__auto__","fexpr__70485","p__70487","map__70488","nextjournal.clerk.viewer/transform-result","_cell","doc","map__70490","map__70491","auto-expand-results?","inline-results?","bundle?","blob-id","blob-mode","blob-opts","presented-result","G__70492","nextjournal.clerk.viewer/present","G__70493","G__70494","nextjournal.clerk.viewer/ensure-wrapped-with-viewers","cljs.core/*ns*","opts-from-form-meta","cljs.core/select-keys","G__70495","p1__70486#","G__70496","cljs.core/meta","nextjournal.clerk.viewer/hide-result-viewer","_","p__70497","map__70498","nextjournal.clerk.viewer/->display","code-cell","visibility","map__70499","code","cljs.core.not_EQ_","p__70500","map__70501","nextjournal.clerk.viewer/with-block-viewer","cell","G__70502","map__70503","display-opts","code?","result?","G__70504","cljs.core.conj","nextjournal.clerk.viewer/result-viewer","nextjournal.clerk.viewer/update-viewers","select-fn->update-fn","p__70508","vec__70509","pred","update-fn","G__70512","G__70519","nextjournal.clerk.viewer/add-viewers","added-viewers","nextjournal.clerk.viewer.add_viewers","nextjournal.clerk.viewer/table-missing-viewer","nextjournal.clerk.viewer/table-markup-viewer","nextjournal.clerk.viewer/table-head-viewer","nextjournal.clerk.viewer/table-body-viewer","nextjournal.clerk.viewer/table-row-viewer","nextjournal.clerk.viewer/update-table-viewers","p1__70560#","p1__70561#","p1__70564#","cljs.core/string?","cljs.core/number?","nextjournal.clerk.viewer/->slug","cljs.core/str","clojure.string/lower-case","c","G__70583","p1__70584#","nextjournal.clerk.viewer/markdown-viewers","p__70590","map__70591","heading-level","nextjournal.markdown.transform/->text","p1__70585#","p1__70586#","p1__70587#","p__70592","map__70593","attrs","p1__70588#","nextjournal.markdown.transform/table-alignment","p1__70589#","p__70598","map__70599","nextjournal.clerk.viewer/char-viewer","cljs.core/char?","nextjournal.clerk.viewer/string-viewer","nextjournal.clerk.viewer/number-viewer","nextjournal.clerk.viewer/number-hex-viewer","nextjournal.clerk.viewer/symbol-viewer","cljs.core/symbol?","nextjournal.clerk.viewer/keyword-viewer","cljs.core/keyword?","nextjournal.clerk.viewer/nil-viewer","cljs.core/nil?","nextjournal.clerk.viewer/boolean-viewer","cljs.core/boolean?","nextjournal.clerk.viewer/map-entry-viewer","cljs.core/map-entry?","nextjournal.clerk.viewer/read+inspect-viewer","nextjournal.clerk.viewer/vector-viewer","nextjournal.clerk.viewer/set-viewer","cljs.core/set?","nextjournal.clerk.viewer/sequential-viewer","nextjournal.clerk.viewer/map-viewer","nextjournal.clerk.viewer/var->symbol","sci.lang/Var","nextjournal.clerk.viewer/var-viewer","p1__70600#","cljs.core.some_fn","nextjournal.clerk.viewer/throwable-viewer","e","clojure.datafy/datafy","p1__70602#","nextjournal.clerk.viewer/ideref-viewer","cljs.core/native-satisfies?","cljs.core/IDeref","ideref","cljs.core/type","deref-as-map","js/cljs","js/cljs.core","js/cljs.core.deref-as-map","cljs.core/Var","cljs.core/deref-as-map","nextjournal.clerk.viewer/regex-viewer","cljs.core/regexp?","regex","nextjournal.clerk.viewer/fallback-viewer","cljs.core/constantly","p1__70604#","nextjournal.clerk.viewer/elision-viewer","nextjournal.clerk.viewer/katex-viewer","nextjournal.clerk.viewer/mathjax-viewer","nextjournal.clerk.viewer/html-viewer","nextjournal.clerk.viewer/plotly-viewer","nextjournal.clerk.viewer/vega-lite-viewer","nextjournal.clerk.viewer/markdown-viewer","p1__70605#","G__70606","nextjournal.markdown/parse","nextjournal.clerk.viewer/code-viewer","clojure.string/trim","sb__4795__auto__","goog.string/StringBuffer","*print-newline*-orig-val__70607","cljs.core/*print-newline*","*print-fn*-orig-val__70608","cljs.core/*print-fn*","*print-newline*-temp-val__70609","*print-fn*-temp-val__70610","x__4796__auto__","cljs.pprint.pprint","nextjournal.clerk.viewer/code-folded-viewer","*print-newline*-orig-val__70611","*print-fn*-orig-val__70612","*print-newline*-temp-val__70613","*print-fn*-temp-val__70614","nextjournal.clerk.viewer/reagent-viewer","nextjournal.clerk.viewer/row-viewer","nextjournal.clerk.viewer/col-viewer","nextjournal.clerk.viewer/table-viewer","map__70628","p1__70620#","cljs.core.map_indexed","cljs.core/vector","p1__70622#","cljs.core.keep","cljs.core/second","G__70629","cljs.core/cons","nextjournal.clerk.viewer/table-error-viewer","nextjournal.clerk.viewer/code-block-viewer","p__70634","map__70643","nextjournal.clerk.viewer/tagged-value-viewer","nextjournal.clerk.viewer/js-object-viewer","goog/isObject","o","cljs.core.remove","goog/typeOf","obj70655","applied-science.js-interop.impl/wrap-key","js/undefined","e70657","obj70658","js/Object.keys","nextjournal.clerk.viewer/js-array-viewer","cljs.core/js-iterable?","p__70668","map__70669","nextjournal.clerk.viewer/extract-clerk-atom-vars","_doc","blocks","p__70671","map__70672","var","p1__70665#","p1__70666#","cljs.core.juxt","p__70676","map__70677","nextjournal.clerk.viewer/process-blocks","ns","cljs.core/into","nextjournal.clerk.viewer/apply-viewers*","nextjournal.clerk.viewer/notebook-viewer","p__70685","map__70686","nextjournal.clerk.viewer/viewer-eval-viewer","nextjournal.clerk.viewer/buffered-image-viewer","js/nextjournal","js/nextjournal.clerk","js/nextjournal.clerk.viewer","js/nextjournal.clerk.viewer.!viewers","reagent.ratom.atom","nextjournal.clerk.viewer/rank-val","val","cljs.core/reduce-kv","res","idx","cljs.core/ifn?","cljs.core/reduced","nextjournal.clerk.viewer/resilient-compare","a","b","e70714","cljs.core/compare","nextjournal.clerk.viewer/ensure-sorted","xs","cljs.core/sorted?","cljs.core.sort_by","cljs.core.sort","nextjournal.clerk.viewer/find-viewer","select-fn","cljs.core.filter","nextjournal.clerk.viewer/find-named-viewer","viewer-name","nextjournal.clerk.viewer/viewer-for","selected-viewer","p__70755","map__70756","G__70773","nextjournal.clerk.viewer.ensure_wrapped_with_viewers","x-viewers","nextjournal.clerk.viewer/->opts","cljs.core/empty?","map__70809","render-fn","transform-fn","transformed-value","G__70822","wrapped-value'","G__70824","nextjournal.clerk.viewer/count-viewers","p1__70843#","G__70844","nextjournal.clerk.viewer/bounded-count-opts","n","limit","total","e70864","cljs.core/bounded-count","G__70865","p__70882","map__70883","nextjournal.clerk.viewer/drop+take-xf","offset","G__70885","cljs.core.drop","cljs.core/int?","p__70896","map__70897","nextjournal.clerk.viewer/process-render-fn","G__70899","nextjournal.clerk.viewer/hash-sha1","hasher","js/goog.crypt.Sha1","goog.crypt/stringToUtf8ByteArray","nextjournal.clerk.viewer/process-viewer","nextjournal.clerk.viewer/processed-keys","cljs.core/set","cljs.core.disj","nextjournal.clerk.viewer/make-elision","fetch-opts","nextjournal.clerk.viewer/find-elision","desc","p1__70942#","cljs.core/tree-seq","G__70945","nextjournal.clerk.viewer/->fetch-opts","nextjournal.clerk.viewer/get-elision","map__70967","path","nextjournal.clerk.viewer/get-fetch-opts-n","p__70988","map__70989","nextjournal.clerk.viewer/inherit-opts","path-segment","cljs.core.fnil","cljs.core/conj","p__70995","map__70999","nextjournal.clerk.viewer/present+paginate-children","preserve-keys?","!budget","budget","map__71001","map__71002","paginate?","fetch-opts'","G__71008","cljs.core/min","children","p__71029","vec__71030","G__71033","nextjournal.clerk.viewer/present*","cljs.core/identity","G__71034","elision","unbounded?","new-offset","G__71037","cljs.core/peek","G__71059","p__71061","map__71062","nextjournal.clerk.viewer/present+paginate-string","map__71064","x__4339__auto__","y__4340__auto__","G__71087","cljs.core.subs","p__71093","map__71094","current-path","map__71099","presented?","descend?","p1__71090#","cljs.core.swap_BANG_","x__4336__auto__","y__4337__auto__","G__71118","cljs.core/associative?","cljs.core/seqable?","nextjournal.clerk.viewer/assign-content-lengths","map__71147","map__71148","name","opening-paren","closing-paren","elision-content-length","cljs.core/+","p1__71134#","p1__71135#","p__71176","p__71177","map__71187","map__71188","nextjournal.clerk.viewer/compute-expanded-at","state","indents","expanded-at","prev-type","content-length","max-length","expanded?","state'","p__71209","map__71210","nextjournal.clerk.viewer/collect-expandable-paths","cljs.core/assoc-in","p__71224","map__71225","nextjournal.clerk.viewer/assign-expanded-at","G__71234","nextjournal.clerk.viewer.present","G__71252","cljs.core.atom","nextjournal.clerk.viewer/assign-closing-parens","nextjournal.clerk.viewer/desc->values","cljs.core/with-meta","cljs.core/coll?","G__71271","cljs.core/empty","nextjournal.clerk.viewer/path-to-value","cljs.core.interleave","nextjournal.clerk.viewer/merge-presentations","root","more","cljs.core.update_in","map__71310","path-from-value","path-from-more","cljs.core/pop","G__71336","nextjournal.clerk.viewer.assign_closing_parens","closing-parens","closing","non-leaf?","defer-closing?","cljs.core/last","G__71361","cljs.core/dissoc","G__71363","G__71386","nextjournal.clerk.viewer/reset-viewers!","nextjournal.clerk.viewer.reset_viewers_BANG_","fexpr__71444","cljs.core/assoc","nextjournal.clerk.viewer/add-viewers!","nextjournal.clerk.viewer/html","nextjournal.clerk.viewer/md","nextjournal.clerk.viewer/plotly","nextjournal.clerk.viewer/vl","nextjournal.clerk.viewer/table","nextjournal.clerk.viewer/row","nextjournal.clerk.viewer/col","nextjournal.clerk.viewer/tex","nextjournal.clerk.viewer/notebook","nextjournal.clerk.viewer/code","nextjournal.clerk.viewer/doc-url","G__71451","nextjournal.clerk.viewer/hide-result","_viewer-opts","nextjournal.clerk.viewer/eval-cljs-result-viewer","nextjournal.clerk.viewer/eval-cljs-str","code-string","nextjournal.clerk.viewer/example-viewer","p__71460","map__71461","nextjournal.clerk.viewer/examples-viewer","examples"],"sourcesContent":["(ns nextjournal.clerk.viewer\n  (:require [clojure.string :as str]\n            [clojure.pprint :as pprint]\n            [clojure.datafy :as datafy]\n            [clojure.set :as set]\n            [clojure.walk :as w]\n            #?@(:clj [[babashka.fs :as fs]\n                      [clojure.repl :refer [demunge]]\n                      [editscript.edit]\n                      [multihash.core :as multihash]\n                      [multihash.digest :as digest]\n                      [nextjournal.clerk.config :as config]\n                      [nextjournal.clerk.analyzer :as analyzer]]\n                :cljs [[goog.crypt]\n                       [goog.crypt.Sha1]\n                       [reagent.ratom :as ratom]\n                       [sci.impl.vars]\n                       [sci.lang]\n                       [applied-science.js-interop :as j]])\n            [nextjournal.markdown :as md]\n            [nextjournal.markdown.transform :as md.transform])\n  #?(:clj (:import (com.pngencoder PngEncoder)\n                   (clojure.lang IDeref IAtom)\n                   (java.lang Throwable)\n                   (java.awt.image BufferedImage)\n                   (java.util Base64)\n                   (java.nio.file Files StandardOpenOption))))\n\n(defrecord ViewerEval [form])\n\n(defrecord ViewerFn [form #?(:cljs f)]\n  #?@(:cljs [IFn\n             (-invoke [this x] ((:f this) x))\n             (-invoke [this x y] ((:f this) x y))]))\n\n;; Make sure `ViewerFn` and `ViewerEval` is changed atomically\n#?(:clj\n   (extend-protocol editscript.edit/IType\n     ViewerFn\n     (get-type [_] :val)\n\n     ViewerEval\n     (get-type [_] :val)))\n\n(defn viewer-fn? [x]\n  (instance? ViewerFn x))\n\n(defn viewer-eval? [x]\n  (instance? ViewerEval x))\n\n(defn resolve-symbol-alias [aliases sym]\n  (if-let [full-ns (some->> sym namespace symbol (get aliases) str)]\n    (symbol full-ns (name sym))\n    sym))\n\n#_(resolve-symbol-alias {'v (find-ns 'nextjournal.clerk.viewer)} 'nextjournal.clerk.render/render-code)\n\n(defn resolve-aliases [aliases form]\n  (w/postwalk #(cond->> %\n                 (symbol? %) (resolve-symbol-alias aliases))\n              form))\n\n(defn ->viewer-fn [form]\n  (map->ViewerFn {:form #?(:clj (cond->> form *ns* (resolve-aliases (ns-aliases *ns*))) :cljs form)\n                  #?@(:cljs [:f (eval form)])}))\n\n(defn ->viewer-eval [form]\n  (map->ViewerEval {:form #?(:clj (cond->> form *ns* (resolve-aliases (ns-aliases *ns*))) :cljs form)}))\n\n(defn open-graph-metas [open-graph-properties]\n  (into (list [:meta {:name \"twitter:card\" :content \"summary_large_image\"}])\n        (map (fn [[prop content]] [:meta {:property (str \"og:\" (name prop)) :content content}]))\n        open-graph-properties))\n\n#?(:clj\n   (defmethod print-method ViewerFn [v ^java.io.Writer w]\n     (.write w (str \"#viewer-fn \" (pr-str `~(:form v))))))\n\n#?(:clj\n   (defmethod print-method ViewerEval [v ^java.io.Writer w]\n     (.write w (str \"#viewer-eval \" (pr-str `~(:form v)))))\n   :cljs\n   (extend-type ViewerEval\n     IPrintWithWriter\n     (-pr-writer [obj w opts]\n       (-write w (str \"#viewer-eval \"))\n       (-write w (pr-str (:form obj))))))\n\n(def data-readers\n  {'viewer-fn ->viewer-fn\n   'viewer-eval ->viewer-eval})\n\n#_(binding [*data-readers* {'viewer-fn ->viewer-fn}]\n    (read-string (pr-str (->viewer-fn '(fn [x] x)))))\n#_(binding [*data-readers* {'viewer-fn ->viewer-fn}]\n    (read-string (pr-str (->viewer-fn 'number?))))\n\n(comment\n  (def num? (form->fn+form 'number?))\n  (num? 42)\n  (:form num?)\n  (pr-str num?))\n\n(defn wrapped-value?\n  \"Tests if `x` is a map containing a `:nextjournal/value`.\"\n  [x]\n  (and (map? x) ;; can throw for `sorted-map`\n       (try (contains? x :nextjournal/value)\n            (catch #?(:clj Exception :cljs js/Error) _e false))))\n\n(defn ensure-wrapped\n  \"Ensures `x` is wrapped in a map under a `:nextjournal/value` key.\"\n  ([x] (if (wrapped-value? x) x {:nextjournal/value x}))\n  ([x v] (-> x ensure-wrapped (assoc :nextjournal/viewer v))))\n\n#_(ensure-wrapped 123)\n#_(ensure-wrapped {:nextjournal/value 456})\n\n(defn ->value\n  \"Takes `x` and returns the `:nextjournal/value` from it, or otherwise `x` unmodified.\"\n  [x]\n  (if (wrapped-value? x)\n    (:nextjournal/value x)\n    x))\n\n#_(->value (with-viewer :code '(+ 1 2 3)))\n#_(->value 123)\n\n(defn ->viewer\n  \"Returns the `:nextjournal/viewer` for a given wrapped value `x`, `nil` otherwise.\"\n  [x]\n  (when (wrapped-value? x)\n    (:nextjournal/viewer x)))\n\n\n#_(->viewer (with-viewer :code '(+ 1 2 3)))\n#_(->viewer \"123\")\n\n(defn ->viewers\n  \"Returns the `:nextjournal/viewers` for a given wrapped value `x`, `nil` otherwise.\"\n  [x]\n  (when (wrapped-value? x)\n    (:nextjournal/viewers x)))\n\n(defn width\n  \"Returns the `:nextjournal/width` for a given wrapped value `x`, `nil` otherwise.\"\n  [x]\n  (when (wrapped-value? x)\n    (:nextjournal/width x)))\n\n(defn css-class\n  \"Returns the `:nextjournal/css-class` for a given wrapped value `x`, `nil` otherwise.\"\n  [x]\n  (when (wrapped-value? x)\n    (:nextjournal/css-class x)))\n\n\n(def viewer-opts-normalization\n  (into {}\n        (map #(vector (keyword \"nextjournal.clerk\" (name %))\n                      (keyword \"nextjournal\"       (name %))))\n        [:viewer :viewers :opts :width :css-class]))\n\n(defn throw-when-viewer-opts-invalid [opts]\n  (when-not (map? opts)\n    (throw (ex-info \"normalize-viewer-opts not passed `map?` opts\" {:opts opts})))\n  (when-let [width (:nextjournal/width opts)]\n    (when-not (contains? #{:full :wide :prose} width)\n      (throw (ex-info \"Invalid `:nextjournal.clerk/width`, allowed values are `:full`, `:wide` and `:prose`.\" {:width width})))\n    (when-let [css-class (:nextjournal/css-class opts)]\n      (throw (ex-info \"Conflicting viewer options `:nextjournal.clerk/width` and `:nextjournal.clerk/css-class`. Please remove either one.\"\n                      {:width width :css-class css-class}))))\n  opts)\n\n(defn normalize-viewer-opts [opts]\n  (throw-when-viewer-opts-invalid (set/rename-keys opts viewer-opts-normalization)))\n\n(defn normalize-viewer [viewer]\n  (cond (keyword? viewer) viewer\n        (map? viewer) viewer\n        (or (symbol? viewer) (seq? viewer) #?(:cljs (fn? viewer))) {:render-fn viewer}\n        #?@(:clj [(fn? viewer) {:transform-fn viewer}])\n        :else (throw (ex-info \"cannot normalize viewer\" {:viewer viewer}))))\n\n#_(normalize-viewer '#(vector :h3 \"Hello \" % \"!\"))\n#_(normalize-viewer :latex)\n#_(normalize-viewer {:render-fn '#(vector :h3 \"Hello \" % \"!\") :transform-fn identity})\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; public api\n\n(defn with-viewer\n\"Wraps the given value `x` and associates it with the given `viewer`. Takes an optional second `viewer-opts` arg.\"\n  ([viewer x] (with-viewer viewer nil x))\n  ([viewer viewer-opts x]\n   (merge (when viewer-opts (normalize-viewer-opts viewer-opts))\n          (-> x\n              ensure-wrapped\n              (assoc :nextjournal/viewer (normalize-viewer viewer))))))\n\n;; TODO: Think of a better name\n(defn with-viewer-extracting-opts [viewer & opts+items]\n  ;; TODO: maybe support sequantial & viewer-opts?\n  (cond\n    (and (map? (first opts+items)) (not (wrapped-value? (first opts+items))))\n    (with-viewer viewer (first opts+items) (rest opts+items))\n\n    (and (sequential? (first opts+items)) (= 1 (count opts+items)))\n    (apply (partial with-viewer viewer) opts+items)\n\n    :else\n    (with-viewer viewer opts+items)))\n\n#_(with-viewer :latex \"x^2\")\n#_(with-viewer '#(vector :h3 \"Hello \" % \"!\") \"x^2\")\n\n(defn with-viewers\n  \"Binds viewers to types, eg {:boolean view-fn}\"\n  [viewers x]\n  (-> x\n      ensure-wrapped\n      (assoc :nextjournal/viewers viewers)))\n\n#_(->> \"x^2\" (with-viewer :latex) (with-viewers [{:name :latex :render-fn :mathjax}]))\n\n(defn get-safe\n  ([key] #(get-safe % key))\n  ([map key]\n   (when (map? map)\n     (try (get map key) ;; can throw for e.g. sorted-map\n          (catch #?(:clj Exception :cljs js/Error) _e nil)))))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; table viewer normalization\n\n(defn rpad-vec [v length padding]\n  (vec (take length (concat v (repeat padding)))))\n\n(def missing-pred\n  :nextjournal/missing)\n\n(defn normalize-seq-of-seq [s]\n  (let [max-count (count (apply max-key count s))]\n    {:rows (mapv #(rpad-vec (->value %) max-count missing-pred) s)}))\n\n(defn normalize-seq-of-map [s]\n  (let [ks (->> s (mapcat keys) distinct vec)]\n    {:head ks\n     :rows (mapv (fn [m] (mapv #(get m % missing-pred) ks)) s)}))\n\n\n(defn normalize-map-of-seq [m]\n  (let [ks (-> m keys vec)\n        m* (if (seq? (get m (first ks)))\n             (reduce (fn [acc [k s]] (assoc acc k (vec s))) {} m)\n             m)]\n    {:head ks\n     :rows (->> (range (count (val (apply max-key (comp count val) m*))))\n              (mapv (fn [i] (mapv #(get-in m* [% i] missing-pred) ks))))}))\n\n(defn normalize-seq-to-vec [{:keys [head rows]}]\n  (cond-> {:rows (vec rows)}\n    head (assoc :head (vec head))))\n\n(defn use-headers [s]\n  (let [{:as table :keys [rows]} (normalize-seq-of-seq s)]\n    (-> table\n        (assoc :head (first rows))\n        (update :rows rest))))\n\n(defn normalize-table-data [data]\n  (cond\n    (and (map? data) (-> data (get-safe :rows) sequential?)) (normalize-seq-to-vec data)\n    (and (map? data) (sequential? (first (vals data)))) (normalize-map-of-seq data)\n    (and (sequential? data) (map? (first data))) (normalize-seq-of-map data)\n    (and (sequential? data) (sequential? (first data))) (normalize-seq-of-seq data)\n    :else nil))\n\n(defn demunge-ex-data [ex-data]\n  (cond-> ex-data\n    (map? ex-data)\n    (update :trace (fn [traces] (mapv #(update % 0 (comp demunge pr-str)) traces)))))\n\n#_(demunge-ex-data (datafy/datafy (ex-info \"foo\" {:bar :baz})))\n\n(declare present present* !viewers apply-viewers apply-viewers* ensure-wrapped-with-viewers process-viewer process-wrapped-value default-viewers find-named-viewer)\n\n(defn inspect-fn []  #?(:clj (->viewer-eval 'nextjournal.clerk.render/inspect-presented) :cljs (eval 'nextjournal.clerk.render/inspect-presented)))\n\n(defn when-wrapped [f] #(cond-> % (wrapped-value? %) f))\n\n(defn inspect-wrapped-value [wrapped-value]\n  [(inspect-fn) (-> wrapped-value apply-viewers process-wrapped-value)])\n\n#_(w/postwalk (when-wrapped inspect-wrapped-value) [1 2 {:a [3 (with-viewer :latex \"\\\\alpha\")]} 4])\n\n(defn mark-presented [wrapped-value]\n  (assoc wrapped-value :nextjournal/presented? true))\n\n(defn mark-preserve-keys [wrapped-value]\n  (assoc wrapped-value :nextjournal/preserve-keys? true))\n\n(defn fetch-all [_opts _xs]\n  (throw (ex-info \"`fetch-all` is deprecated, please use a `:transform-fn` with `mark-presented` instead.\" {})))\n\n(def datafied?\n  (get-safe :nextjournal.clerk/datafied))\n\n(defn with-md-viewer [wrapped-value]\n  (let [{:as node :keys [type]} (->value wrapped-value)]\n    (when-not type\n      (throw (ex-info \"no type given for with-md-viewer\" {:wrapped-value wrapped-value})))\n    (with-viewer (keyword \"nextjournal.markdown\" (name type)) wrapped-value)))\n\n(defn into-markup [markup]\n  (fn [{:as wrapped-value :nextjournal/keys [viewers]}]\n    (-> (with-viewer {:name :html- :render-fn 'identity} wrapped-value)\n        mark-presented\n        (update :nextjournal/value\n                (fn [{:as node :keys [text content]}]\n                  (into (cond-> markup (fn? markup) (apply [node]))\n                        (cond text [text]\n                              content (mapv #(-> (with-md-viewer %)\n                                                 (assoc :nextjournal/viewers viewers)\n                                                 (apply-viewers)\n                                                 (as-> w\n                                                     (if (= :html- (:name (->viewer w)))\n                                                       (->value w)\n                                                       [(inspect-fn) (process-wrapped-value w)])))\n                                            content))))))))\n\n#?(:clj\n   (defn ->edn [x]\n     (binding [*print-namespace-maps* false\n               *print-length* nil\n               *print-level* nil]\n       (pr-str x))))\n\n#_(->edn {:nextjournal/value :foo})\n\n(defn update-val [f & args]\n  (fn [wrapped-value] (apply update wrapped-value :nextjournal/value f args)))\n\n#_((update-val + 1) {:nextjournal/value 41})\n\n(defn var-from-def? [x]\n  (var? (get-safe x :nextjournal.clerk/var-from-def)))\n\n(def var-from-def-viewer\n  {:pred var-from-def?\n   :transform-fn (update-val (comp deref :nextjournal.clerk/var-from-def))})\n\n(defn apply-viewer-unwrapping-var-from-def\n  \"Applies the `viewer` (if set) to the given result `result`. In case\n  the `value` is a `var-from-def?` it will be unwrapped unless the\n  viewer opts out with a truthy `:nextjournal.clerk/var-from-def`.\"\n  [{:as result :nextjournal/keys [value viewer]}]\n  (if viewer\n    (let [value+viewer (if (or (var? viewer) (fn? viewer))\n                         (viewer value)\n                         {:nextjournal/value value\n                          :nextjournal/viewer (normalize-viewer viewer)})\n          {unwrap-var :transform-fn var-from-def? :pred} var-from-def-viewer]\n      (assoc result :nextjournal/value (cond-> value+viewer\n                                         (and (var-from-def? value)\n                                              (-> value+viewer ->viewer :var-from-def? not))\n                                         unwrap-var)))\n    result))\n\n#?(:clj\n   (defn base64-encode-value [{:as result :nextjournal/keys [content-type]}]\n     (update result :nextjournal/value (fn [data] (str \"data:\" content-type \";base64,\"\n                                                       (.encodeToString (Base64/getEncoder) data))))))\n\n#?(:clj\n   (defn store+get-cas-url! [{:keys [out-path ext]} content]\n     (assert out-path) (assert ext)\n     (let [cas-url (str \"_data/\" (multihash/base58 (digest/sha2-512 content)) \".\" ext)\n           cas-path (fs/path out-path cas-url)]\n       (fs/create-dirs (fs/parent cas-path))\n       (when-not (fs/exists? cas-path)\n         (Files/write cas-path content (into-array [StandardOpenOption/CREATE])))\n       cas-url)))\n\n#?(:clj\n   (defn relative-root-prefix-from [path]\n     (str/join (repeat (get (frequencies (str path)) \\/ 0) \"../\"))))\n\n#?(:clj\n   (defn map-index [{:as _opts :keys [index]} path]\n     (get {index \"index.clj\"} path path)))\n\n#?(:clj\n   (defn maybe-store-result-as-file [{:as doc+blob-opts :keys [out-path file]} {:as result :nextjournal/keys [content-type value]}]\n     ;; TODO: support customization via viewer api\n     (if-let [image-type (second (re-matches #\"image/(\\w+)\" content-type))]\n       (assoc result :nextjournal/value\n              (str (relative-root-prefix-from (map-index doc+blob-opts file))\n                   (store+get-cas-url! (assoc doc+blob-opts :ext image-type) value)))\n       result)))\n\n#_(nextjournal.clerk.builder/build-static-app! {:paths [\"image.clj\" \"notebooks/image.clj\" \"notebooks/viewers/image.clj\"] :bundle? false :browse? false})\n#_(nextjournal.clerk.builder/build-static-app! {:paths [\"image.clj\" \"notebooks/image.clj\" \"notebooks/viewers/image.clj\"] :browse? false})\n\n#?(:clj\n   (defn process-blobs [{:as doc+blob-opts :keys [blob-mode blob-id]} presented-result]\n     (w/postwalk #(if (get % :nextjournal/content-type)\n                    (case blob-mode\n                      :lazy-load (assoc % :nextjournal/value {:blob-id blob-id :path (:path %)})\n                      :inline (base64-encode-value %)\n                      :file (maybe-store-result-as-file doc+blob-opts %))\n                    %)\n                 presented-result)))\n\n(defn get-default-viewers []\n  (:default @!viewers default-viewers))\n\n(defn get-viewers\n  ([scope] (get-viewers scope nil))\n  ([scope value]\n   (or (when value (->viewers value))\n       (when scope (@!viewers scope))\n       (get-default-viewers))))\n\n#_(get-viewers nil nil)\n\n(declare result-viewer)\n\n(defn transform-result [{:as _cell :keys [doc result form]}]\n  (let [{:keys [auto-expand-results? inline-results? bundle?]} doc\n        {:nextjournal/keys [value blob-id viewers]} result\n        blob-mode (cond\n                    (and (not inline-results?) blob-id) :lazy-load\n                    bundle? :inline ;; TODO: provide a separte setting for this\n                    :else :file)\n        blob-opts (assoc doc :blob-mode blob-mode :blob-id blob-id)\n        presented-result (->> (present (ensure-wrapped-with-viewers (or viewers (get-viewers *ns*)) value))\n                              #?(:clj (process-blobs blob-opts)))\n        opts-from-form-meta (-> result\n                                (select-keys [:nextjournal/css-class :nextjournal/width :nextjournal/opts])\n                                (cond-> #_result\n                                  (some? auto-expand-results?) (update :nextjournal/opts #(merge {:auto-expand-results? auto-expand-results?} %))))]\n    (merge {:nextjournal/value (cond-> {:nextjournal/presented presented-result}\n\n                                 (-> form meta :nextjournal.clerk/open-graph :image)\n                                 (assoc :nextjournal/open-graph-image-capture true)\n\n                                 #?@(:clj [(= blob-mode :lazy-load)\n                                           (assoc :nextjournal/fetch-opts {:blob-id blob-id}\n                                                  :nextjournal/hash (analyzer/->hash-str [blob-id presented-result opts-from-form-meta]))]))}\n           (dissoc presented-result :nextjournal/value :nextjournal/viewer :nextjournal/viewers)\n           opts-from-form-meta)))\n\n#_(nextjournal.clerk.view/doc->viewer @nextjournal.clerk.webserver/!doc)\n\n(def hide-result-viewer\n  {:name :hide-result :transform-fn (fn [_] nil)})\n\n(defn ->display [{:as code-cell :keys [result visibility]}]\n  (let [{:keys [code result]} visibility]\n    {:result? (not= :hide result)\n     :fold? (= code :fold)\n     :code? (not= :hide code)}))\n\n#_(->display {:result {:nextjournal.clerk/visibility {:code :show :result :show}}})\n#_(->display {:result {:nextjournal.clerk/visibility {:code :fold :result :show}}})\n#_(->display {:result {:nextjournal.clerk/visibility {:code :fold :result :hide}}})\n\n(defn with-block-viewer [doc {:as cell :keys [type]}]\n  (case type\n    :markdown [(with-viewer :markdown (:doc cell))]\n    :code (let [cell (update cell :result apply-viewer-unwrapping-var-from-def)\n                {:as display-opts :keys [code? result?]} (->display cell)]\n            ;; TODO: use vars instead of names\n            (cond-> []\n              code?\n              (conj (with-viewer :clerk/code-block {:nextjournal.clerk/opts (select-keys cell [:loc])}\n                      ;; TODO: display analysis could be merged into cell earlier\n                      (-> cell (merge display-opts) (dissoc :result))))\n              result?\n              (conj (with-viewer (:name result-viewer)\n                      (assoc cell :doc doc)))))))\n\n(defn update-viewers [viewers select-fn->update-fn]\n  (reduce (fn [viewers [pred update-fn]]\n            (mapv (fn [viewer]\n                    (cond-> viewer\n                      (pred viewer) update-fn)) viewers))\n          viewers\n          select-fn->update-fn))\n\n#_(update-viewers default-viewers {:page-size #(dissoc % :page-size)})\n\n(defn add-viewers\n  ([added-viewers] (add-viewers (get-default-viewers) added-viewers))\n  ([viewers added-viewers] (into (vec added-viewers) viewers)))\n\n(def table-missing-viewer {:pred #{:nextjournal/missing} :render-fn '(fn [x] [:<>])})\n\n(def table-markup-viewer\n  {:name :table/markup\n   :render-fn '(fn [head+body opts]\n                 [:div.overflow-x-auto (into [:table.text-xs.sans-serif.text-gray-900.dark:text-white.not-prose] (nextjournal.clerk.render/inspect-children opts) head+body)])})\n\n(def table-head-viewer\n  {:name :table/head\n   :render-fn '(fn [header-row {:as opts :keys [path number-col?]}]\n                 [:thead.border-b.border-gray-300.dark:border-slate-700\n                  (into [:tr]\n                        (map-indexed (fn [i {:as header-cell :nextjournal/keys [value]}]\n                                       (let [title (when (or (string? value) (keyword? value) (symbol? value))\n                                                     value)]\n                                         [:th.relative.pl-6.pr-2.py-1.align-bottom.font-medium\n                                          (cond-> {:class (when (and (ifn? number-col?) (number-col? i)) \"text-right\")} title (assoc :title title))\n                                          [:div.flex.items-center (nextjournal.clerk.render/inspect-presented opts header-cell)]]))) header-row)])})\n\n(def table-body-viewer\n  {:name :table/body :page-size 20\n   :render-fn '(fn [rows opts] (into [:tbody] (map-indexed (fn [idx row] (nextjournal.clerk.render/inspect-presented (update opts :path conj idx) row))) rows))})\n\n(def table-row-viewer\n  {:name :table/row\n   :render-fn '(fn [row {:as opts :keys [path number-col?]}]\n                 (into [:tr.hover:bg-gray-200.dark:hover:bg-slate-700\n                        {:class (if (even? (peek path)) \"bg-black/5 dark:bg-gray-800\" \"bg-white dark:bg-gray-900\")}]\n                       (map-indexed (fn [idx cell] [:td.pl-6.pr-2.py-1 (when (and (ifn? number-col?) (number-col? idx)) {:class \"text-right\"}) (nextjournal.clerk.render/inspect-presented opts cell)])) row))})\n\n(defn update-table-viewers [viewers]\n  (-> viewers\n      (update-viewers {(comp #{string?} :pred) #(assoc % :render-fn 'nextjournal.clerk.render/render-string)\n                       (comp #{number?} :pred) #(assoc % :render-fn '(fn [x] [:span.tabular-nums (if (js/Number.isNaN x) \"NaN\" (str x))]))\n                       (comp #{:elision} :name) #(assoc % :render-fn '(fn [{:as fetch-opts :keys [total offset unbounded?]} {:keys [num-cols]}]\n                                                                        [nextjournal.clerk.render/consume-view-context\n                                                                         :fetch-fn\n                                                                         (fn [fetch-fn]\n                                                                           [:tr.border-t.dark:border-slate-700\n                                                                            [:td.text-center.py-1\n                                                                             {:col-span num-cols\n                                                                              :class (if (fn? fetch-fn)\n                                                                                       \"bg-indigo-50 hover:bg-indigo-100 dark:bg-gray-800 dark:hover:bg-slate-700 cursor-pointer\"\n                                                                                       \"text-gray-400 text-slate-500\")\n                                                                              :on-click (fn [_] (when (fn? fetch-fn)\n                                                                                                  (fetch-fn fetch-opts)))}\n                                                                             (- total offset) (when unbounded? \"+\") (if (fn? fetch-fn) \" more\u2026\" \" more elided\")]])]))})\n      (add-viewers [table-missing-viewer\n                    table-markup-viewer\n                    table-head-viewer\n                    table-body-viewer\n                    table-row-viewer])))\n\n#?(:clj (def utc-date-format ;; from `clojure.instant/thread-local-utc-date-format`\n          (doto (java.text.SimpleDateFormat. \"yyyy-MM-dd'T'HH:mm:ss.SSS-00:00\")\n            (.setTimeZone (java.util.TimeZone/getTimeZone \"GMT\")))))\n\n#?(:clj\n   (defn datafy-scope [scope]\n     (cond\n       (instance? clojure.lang.Namespace scope) {:namespace (-> scope str keyword)}\n       (keyword? scope) scope\n       :else (throw (ex-info (str \"Unsupported scope \" scope) {:scope scope})))))\n\n#_(datafy-scope *ns*)\n#_(datafy-scope #'datafy-scope)\n\n(defn ->slug [text]\n  (apply str\n         (map (comp str/lower-case\n                    (fn [c] (case c (\\space \\-) \\_ c))) text)))\n#_ (->slug \"Hello There\")\n\n(def markdown-viewers\n  [{:name :nextjournal.markdown/doc :transform-fn (into-markup [:div.viewer-markdown])}\n\n   ;; blocks\n   {:name :nextjournal.markdown/heading\n    :transform-fn (into-markup\n                   (fn [{:as node :keys [heading-level]}]\n                     [(str \"h\" heading-level) {:id (->slug (md.transform/->text node))}]))}\n   {:name :nextjournal.markdown/image :transform-fn #(with-viewer :html [:img.inline (-> % ->value :attrs)])}\n   {:name :nextjournal.markdown/blockquote :transform-fn (into-markup [:blockquote])}\n   {:name :nextjournal.markdown/paragraph :transform-fn (into-markup [:p])}\n   {:name :nextjournal.markdown/plain :transform-fn (into-markup [:<>])}\n   {:name :nextjournal.markdown/ruler :transform-fn (into-markup [:hr])}\n   {:name :nextjournal.markdown/code\n    :transform-fn (fn [wrapped-value] (with-viewer :html\n                                        [:div.viewer-code (with-viewer :code\n                                                            (md.transform/->text (->value wrapped-value)))]))}\n\n   ;; marks\n   {:name :nextjournal.markdown/em :transform-fn (into-markup [:em])}\n   {:name :nextjournal.markdown/strong :transform-fn (into-markup [:strong])}\n   {:name :nextjournal.markdown/monospace :transform-fn (into-markup [:code])}\n   {:name :nextjournal.markdown/strikethrough :transform-fn (into-markup [:s])}\n   {:name :nextjournal.markdown/link :transform-fn (into-markup #(vector :a (:attrs %)))}\n   {:name :nextjournal.markdown/internal-link :transform-fn (into-markup #(vector :a {:href (str \"#\" (:text %))}))}\n   {:name :nextjournal.markdown/hashtag :transform-fn (into-markup #(vector :a {:href (str \"#\" (:text %))}))}\n\n   ;; inlines\n   {:name :nextjournal.markdown/text :transform-fn (into-markup [:span])}\n   {:name :nextjournal.markdown/softbreak :transform-fn (fn [_] (with-viewer :html [:span \" \"]))}\n   #?(:clj {:name :nextjournal.markdown/inline :transform-fn (comp eval read-string md.transform/->text)})\n\n   ;; formulas\n   {:name :nextjournal.markdown/formula\n    :transform-fn (comp :text ->value)\n    :render-fn '(fn [tex] (nextjournal.clerk.render/render-katex tex {:inline? true}))}\n   {:name :nextjournal.markdown/block-formula\n    :transform-fn (comp :text ->value)\n    :render-fn 'nextjournal.clerk.render/render-katex}\n\n   ;; lists\n   {:name :nextjournal.markdown/bullet-list :transform-fn (into-markup [:ul])}\n   {:name :nextjournal.markdown/numbered-list :transform-fn (into-markup [:ol])}\n   {:name :nextjournal.markdown/todo-list :transform-fn (into-markup [:ul.contains-task-list])}\n   {:name :nextjournal.markdown/list-item :transform-fn (into-markup [:li])}\n   {:name :nextjournal.markdown/todo-item\n    :transform-fn (into-markup (fn [{:keys [attrs]}] [:li [:input {:type \"checkbox\" :default-checked (:checked attrs)}]]))}\n\n   ;; tables\n   {:name :nextjournal.markdown/table :transform-fn (into-markup [:table])}\n   {:name :nextjournal.markdown/table-head :transform-fn (into-markup [:thead])}\n   {:name :nextjournal.markdown/table-body :transform-fn (into-markup [:tbody])}\n   {:name :nextjournal.markdown/table-row :transform-fn (into-markup [:tr])}\n   {:name :nextjournal.markdown/table-header\n    :transform-fn (into-markup #(vector :th {:style (md.transform/table-alignment (:attrs %))}))}\n   {:name :nextjournal.markdown/table-data\n    :transform-fn (into-markup #(vector :td {:style (md.transform/table-alignment (:attrs %))}))}\n\n   ;; ToC via [[TOC]] placeholder ignored\n   {:name :nextjournal.markdown/toc :transform-fn (into-markup [:div.toc])}\n\n   ;; sidenotes\n   {:name :nextjournal.markdown/sidenote\n    :transform-fn (into-markup (fn [{:keys [attrs]}] [:span.sidenote [:sup {:style {:margin-right \"3px\"}} (-> attrs :ref inc)]]))}\n   {:name :nextjournal.markdown/sidenote-ref\n    :transform-fn (into-markup [:sup.sidenote-ref])}])\n\n(def char-viewer\n  {:pred char? :render-fn '(fn [c] [:span.cmt-string.inspected-value \"\\\\\" c])})\n\n(def string-viewer\n  {:pred string? :render-fn 'nextjournal.clerk.render/render-quoted-string :page-size 80})\n\n(def number-viewer\n  {:pred number? :render-fn 'nextjournal.clerk.render/render-number})\n\n(def number-hex-viewer\n  {:name :number-hex :render-fn '(fn [num] (nextjournal.clerk.render/render-number (str \"0x\" (.toString (js/Number. num) 16))))})\n\n(def symbol-viewer\n  {:pred symbol? :render-fn '(fn [x] [:span.cmt-keyword.inspected-value (str x)])})\n\n(def keyword-viewer\n  {:pred keyword? :render-fn '(fn [x] [:span.cmt-atom.inspected-value (str x)])})\n\n(def nil-viewer\n  {:pred nil? :render-fn '(fn [_] [:span.cmt-default.inspected-value \"nil\"])})\n\n(def boolean-viewer\n  {:pred boolean? :render-fn '(fn [x] [:span.cmt-bool.inspected-value (str x)])})\n\n(def map-entry-viewer\n  {:pred map-entry? :name :map-entry :render-fn '(fn [xs opts] (into [:<>] (comp (nextjournal.clerk.render/inspect-children opts) (interpose \" \")) xs)) :page-size 2})\n\n(def read+inspect-viewer\n  {:name :read+inspect :render-fn '(fn [x] (try [nextjournal.clerk.render/inspect (read-string x)]\n                                                (catch js/Error _e\n                                                  (nextjournal.clerk.render/render-unreadable-edn x))))})\n\n(def vector-viewer\n  {:pred vector? :render-fn 'nextjournal.clerk.render/render-coll :opening-paren \"[\" :closing-paren \"]\" :page-size 20})\n\n(def set-viewer\n  {:pred set? :render-fn 'nextjournal.clerk.render/render-coll :opening-paren \"#{\" :closing-paren \"}\" :page-size 20})\n\n(def sequential-viewer\n  {:pred sequential? :render-fn 'nextjournal.clerk.render/render-coll :opening-paren \"(\" :closing-paren \")\" :page-size 20})\n\n(def map-viewer\n  {:pred map? :name :map :render-fn 'nextjournal.clerk.render/render-map :opening-paren \"{\" :closing-paren \"}\" :page-size 10})\n\n#?(:cljs (defn var->symbol [v] (if (instance? sci.lang.Var v) (sci.impl.vars/toSymbol v) (symbol v))))\n\n(def var-viewer\n  {:pred (some-fn var? #?(:cljs #(instance? sci.lang.Var %)))\n   :transform-fn (comp #?(:cljs var->symbol :clj symbol) ->value)\n   :render-fn '(fn [x] [:span.inspected-value [:span.cmt-meta \"#'\" (str x)]])})\n\n(def throwable-viewer\n  {:name :error\n   :render-fn 'nextjournal.clerk.render/render-throwable\n   :pred (fn [e] (instance? #?(:clj Throwable :cljs js/Error) e))\n   :transform-fn (comp mark-presented (update-val (comp demunge-ex-data datafy/datafy)))})\n\n(def buffered-image-viewer #?(:clj {:pred #(instance? BufferedImage %)\n                                    :transform-fn (fn [{image :nextjournal/value}]\n                                                    (let [w (.getWidth image)\n                                                          h (.getHeight image)\n                                                          r (float (/ w h))]\n                                                      (-> {:nextjournal/value (.. (PngEncoder.)\n                                                                                  (withBufferedImage image)\n                                                                                  (withCompressionLevel 1)\n                                                                                  (toBytes))\n                                                           :nextjournal/content-type \"image/png\"\n                                                           :nextjournal/width (if (and (< 2 r) (< 900 w)) :full :wide)}\n                                                          mark-presented)))\n                                    :render-fn '(fn [blob] [:figure.flex.flex-col.items-center.not-prose [:img {:src (nextjournal.clerk.render/url-for blob)}]])}))\n\n(def ideref-viewer\n  {:pred #(#?(:clj instance? :cljs satisfies?) IDeref %)\n   :transform-fn (update-val (fn [ideref]\n                               (with-viewer :tagged-value\n                                 {:tag \"object\"\n                                  :value (vector (symbol (pr-str (type ideref)))\n                                                 #?(:clj (with-viewer :number-hex (System/identityHashCode ideref)))\n                                                 (if-let [deref-as-map (resolve 'clojure.core/deref-as-map)]\n                                                   (deref-as-map ideref)\n                                                   (deref ideref)))})))})\n\n(def regex-viewer\n  {:pred #?(:clj (partial instance? java.util.regex.Pattern) :cljs regexp?)\n   :transform-fn (fn [wrapped-value] (with-viewer :tagged-value {:tag \"\" :value (let [regex (->value wrapped-value)]\n                                                                                  #?(:clj (.pattern regex) :cljs (.-source regex)))}))})\n\n(def fallback-viewer\n  {:pred (constantly :true) :transform-fn (update-val #(with-viewer :read+inspect (pr-str %)))})\n\n(def elision-viewer\n  {:name :elision :render-fn 'nextjournal.clerk.render/render-elision :transform-fn mark-presented})\n\n(def katex-viewer\n  {:name :latex :render-fn 'nextjournal.clerk.render/render-katex :transform-fn mark-presented})\n\n(def mathjax-viewer\n  {:name :mathjax :render-fn 'nextjournal.clerk.render/render-mathjax :transform-fn mark-presented})\n\n(def html-viewer\n  {:name :html\n   :render-fn 'identity\n   :transform-fn (comp mark-presented\n                       (update-val (fn [data]\n                                     (if (string? data)\n                                       [:div {:dangerouslySetInnerHTML {:__html data}}]\n                                       (w/postwalk (when-wrapped inspect-wrapped-value) data)))))})\n\n(def plotly-viewer\n  {:name :plotly :render-fn 'nextjournal.clerk.render/render-plotly :transform-fn mark-presented})\n\n(def vega-lite-viewer\n  {:name :vega-lite :render-fn 'nextjournal.clerk.render/render-vega-lite :transform-fn mark-presented})\n\n(def markdown-viewer\n  {:name :markdown :transform-fn (fn [wrapped-value]\n                                   (-> wrapped-value\n                                       mark-presented\n                                       (update :nextjournal/value #(cond->> % (string? %) md/parse))\n                                       (update :nextjournal/viewers add-viewers markdown-viewers)\n                                       (with-md-viewer)))})\n\n(def code-viewer\n  {:name :code :render-fn 'nextjournal.clerk.render/render-code :transform-fn (comp mark-presented (update-val (fn [v] (if (string? v) v (str/trim (with-out-str (pprint/pprint v)))))))})\n\n(def code-folded-viewer\n  {:name :code-folded :render-fn 'nextjournal.clerk.render/render-folded-code :transform-fn (comp mark-presented (update-val (fn [v] (if (string? v) v (with-out-str (pprint/pprint v))))))})\n\n(def reagent-viewer\n  {:name :reagent :render-fn 'nextjournal.clerk.render/render-reagent :transform-fn mark-presented})\n\n(def row-viewer\n  {:name :row :render-fn '(fn [items opts]\n                            (let [item-count (count items)]\n                              (into [:div {:class \"md:flex md:flex-row md:gap-4 not-prose\"\n                                           :style opts}]\n                                    (map (fn [item]\n                                           [:div.flex.items-center.justify-center.flex-auto\n                                            (nextjournal.clerk.render/inspect-presented opts item)])) items)))})\n\n(def col-viewer\n  {:name :col :render-fn '(fn [items opts]\n                            (into [:div {:class \"md:flex md:flex-col md:gap-4 clerk-grid not-prose\"\n                                         :style opts}]\n                                  (map (fn [item]\n                                         [:div.flex.items-center.justify-center\n                                          (nextjournal.clerk.render/inspect-presented opts item)])) items))})\n\n(def table-viewer\n  {:name :table\n   :transform-fn (fn [wrapped-value]\n                   (if-let [{:keys [head rows]} (normalize-table-data (->value wrapped-value))]\n                     (-> wrapped-value\n                         (assoc :nextjournal/viewer :table/markup)\n                         (update :nextjournal/width #(or % :wide))\n                         (update :nextjournal/viewers update-table-viewers)\n                         (assoc :nextjournal/opts {:num-cols (count (or head (first rows)))\n                                                   :number-col? (into #{}\n                                                                      (comp (map-indexed vector)\n                                                                            (keep #(when (number? (second %)) (first %))))\n                                                                      (not-empty (first rows)))})\n                         (assoc :nextjournal/value (cond->> []\n                                                     (seq rows) (cons (with-viewer :table/body (map (partial with-viewer :table/row) rows)))\n                                                     head (cons (with-viewer (:name table-head-viewer table-head-viewer) head)))))\n                     (-> wrapped-value\n                         mark-presented\n                         (assoc :nextjournal/width :wide)\n                         (assoc :nextjournal/value [(present wrapped-value)])\n                         (assoc :nextjournal/viewer {:render-fn 'nextjournal.clerk.render/render-table-error}))))})\n\n(def table-error-viewer\n  {:name :table-error :render-fn 'nextjournal.clerk.render/render-table-error :page-size 1})\n\n(def code-block-viewer\n  {:name :clerk/code-block :transform-fn (fn [{:as wrapped-value :nextjournal/keys [value]}]\n                                           (-> wrapped-value\n                                               (assoc :nextjournal/viewer (if (:fold? value) :code-folded :code))\n                                               (update :nextjournal/value :text)))})\n\n(def tagged-value-viewer\n  {:name :tagged-value\n   :render-fn '(fn [{:keys [tag value space?]} opts]\n                 (nextjournal.clerk.render/render-tagged-value\n                  {:space? (:nextjournal/value space?)}\n                  (str \"#\" (:nextjournal/value tag))\n                  [nextjournal.clerk.render/inspect-presented value]))\n   :transform-fn mark-preserve-keys})\n\n\n#?(:cljs\n   (def js-object-viewer\n     {:name :js-array\n      :pred goog/isObject\n      :page-size 20\n      :opening-paren \"{\" :closing-paren \"}\"\n      :render-fn '(fn [v opts] (nextjournal.clerk.render/render-tagged-value {:space? true}\n                                                                            \"#js\"\n                                                                            (nextjournal.clerk.render/render-map v opts)))\n      :transform-fn (update-val (fn [^js o]\n                                  (into {}\n                                        (comp (remove (fn [k] (identical? \"function\" (goog/typeOf (j/get o k)))))\n                                              (map (fn [k]\n                                                     [(symbol k)\n                                                      (try (let [v (j/get o k)]\n                                                             (.-constructor v) ;; test for SecurityError\n                                                             ;; https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy\n                                                             v)\n                                                           (catch js/Error _ 'forbidden))]))) (js/Object.keys o))))}))\n\n#?(:cljs\n   (def js-array-viewer\n     {:name :js-array\n      :pred js-iterable?\n      :transform-fn (update-val seq)\n      :render-fn '(fn [v opts]\n                    (nextjournal.clerk.render/render-tagged-value {:space? true}\n                                                                  \"#js\"\n                                                                  (nextjournal.clerk.render/render-coll v opts)))\n      :opening-paren \"[\" :closing-paren \"]\"\n      :page-size 20}))\n\n(def result-viewer\n  {:name :clerk/result\n   :render-fn 'nextjournal.clerk.render/render-result\n   :transform-fn (comp mark-presented (update-val transform-result))})\n\n#?(:clj\n   (defn edn-roundtrippable? [x]\n     (= x (-> x ->edn read-string))))\n\n#?(:clj\n   (defn throw-if-sync-var-is-invalid [var]\n     (when-not (instance? IAtom @var)\n       (throw (ex-info \"Clerk cannot sync non-atom values. Vars meant for sync need to hold clojure atom values.\"\n                       {:var var :value @var}\n                       (IllegalArgumentException.))))\n     (try (when-not (edn-roundtrippable? @@var)\n            (throw (IllegalArgumentException.)))\n          (catch Exception ex\n            (throw (ex-info \"Clerk can only sync values which can be round-tripped in EDN.\"\n                            {:var var :value @var}\n                            ex))))))\n\n(defn extract-clerk-atom-vars [{:as _doc :keys [blocks]}]\n  (into {}\n        (comp (keep (fn [{:keys [result form]}]\n                      (when-let [var (-> result :nextjournal/value (get-safe :nextjournal.clerk/var-from-def))]\n                        (when (contains? (meta form) :nextjournal.clerk/sync)\n                          #?(:clj (throw-if-sync-var-is-invalid var))\n                          var))))\n              (map (juxt #(list 'quote (symbol %)) #(->> % deref deref (list 'quote)))))\n        blocks))\n\n(defn process-blocks [viewers {:as doc :keys [ns]}]\n  (-> doc\n      (assoc :atom-var-name->state (->viewer-eval (list 'nextjournal.clerk.render/intern-atoms! (extract-clerk-atom-vars doc))))\n      (update :blocks (partial into [] (comp (mapcat (partial with-block-viewer doc))\n                                             (map (comp process-wrapped-value\n                                                        apply-viewers*\n                                                        (partial ensure-wrapped-with-viewers viewers))))))\n      (select-keys [:atom-var-name->state :auto-expand-results? :blocks :css-class :toc :toc-visibility :title :open-graph])\n      #?(:clj (cond-> ns (assoc :scope (datafy-scope ns))))))\n\n(def notebook-viewer\n  {:name :clerk/notebook\n   :render-fn 'nextjournal.clerk.render/render-notebook\n   :transform-fn (fn [{:as wrapped-value :nextjournal/keys [viewers]}]\n                   (-> wrapped-value\n                       (update :nextjournal/value (partial process-blocks viewers))\n                       mark-presented))})\n\n(def viewer-eval-viewer\n  {:pred viewer-eval?\n   :var-from-def? true\n   :transform-fn (comp mark-presented\n                       (update-val\n                        (fn [x]\n                          (cond (viewer-eval? x) x\n                                (seq? x) (->viewer-eval x)\n                                (symbol? x) (->viewer-eval x)\n                                (var? x) (->viewer-eval (list 'resolve (list 'quote (symbol x))))\n                                (var-from-def? x) (recur (-> x :nextjournal.clerk/var-from-def symbol))))))\n   :render-fn '(fn [x opts]\n                 (if (nextjournal.clerk.render/reagent-atom? x) ;; special atoms handling to support reactivity\n                   [nextjournal.clerk.render/render-tagged-value {:space? false}\n                    \"#object\"\n                    [nextjournal.clerk.render/inspect [(symbol (pr-str (type x))) @x]]]\n                   [nextjournal.clerk.render/inspect x]))})\n\n(def default-viewers\n  ;; maybe make this a sorted-map\n  [char-viewer\n   string-viewer\n   number-viewer\n   number-hex-viewer\n   symbol-viewer\n   keyword-viewer\n   nil-viewer\n   boolean-viewer\n   map-entry-viewer\n   var-from-def-viewer\n   read+inspect-viewer\n   vector-viewer\n   set-viewer\n   sequential-viewer\n   viewer-eval-viewer\n   map-viewer\n   var-viewer\n   throwable-viewer\n   buffered-image-viewer\n   ideref-viewer\n   regex-viewer\n   #?(:cljs js-array-viewer)\n   #?(:cljs js-object-viewer)\n   fallback-viewer\n   elision-viewer\n   katex-viewer\n   mathjax-viewer\n   html-viewer\n   plotly-viewer\n   vega-lite-viewer\n   markdown-viewer\n   code-viewer\n   code-folded-viewer\n   reagent-viewer\n   row-viewer\n   col-viewer\n   table-viewer\n   table-error-viewer\n   code-block-viewer\n   result-viewer\n   tagged-value-viewer\n   notebook-viewer\n   hide-result-viewer])\n\n(defonce\n  ^{:doc \"atom containing a map of and per-namespace viewers or `:defaults` overridden viewers.\"}\n  !viewers\n  (#?(:clj atom :cljs ratom/atom) {}))\n\n#_(reset! !viewers {})\n\n;; heavily inspired by code from Thomas Heller in shadow-cljs, see\n;; https://github.com/thheller/shadow-cljs/blob/1708acb21bcdae244b50293d17633ce35a78a467/src/main/shadow/remote/runtime/obj_support.cljc#L118-L144\n\n(defn rank-val [val]\n  (reduce-kv (fn [res idx pred]\n               (if (and (ifn? pred) (pred val)) (reduced idx) res))\n             -1\n             (into [] (map :pred) default-viewers)))\n\n(defn resilient-compare [a b]\n  (try\n    (compare a b)\n    (catch #?(:clj Exception :cljs js/Error) _e\n      (compare (rank-val a) (rank-val b)))))\n\n(defn ensure-sorted [xs]\n  (cond\n    (sorted? xs) xs\n    (map? xs) (sort-by first resilient-compare xs)\n    (set? xs) (sort resilient-compare xs)\n    :else xs))\n\n\n(defn find-viewer [viewers select-fn]\n  (first (filter select-fn viewers)))\n\n#_(find-viewer default-viewers (comp #{string?} :pred))\n#_(find-viewer default-viewers (comp #{:elision} :name))\n\n(defn find-named-viewer [viewers viewer-name]\n  (find-viewer viewers (comp #{viewer-name} :name)))\n\n#_(find-named-viewer default-viewers :elision)\n\n(defn viewer-for [viewers x]\n  (or (when-let [selected-viewer (->viewer x)]\n        (if (keyword? selected-viewer)\n          (or (find-named-viewer viewers selected-viewer)\n              (throw (ex-info (str \"cannot find viewer named \" selected-viewer)\n                              {:selected-viewer selected-viewer :viewers viewers})))\n          selected-viewer))\n      (find-viewer viewers (let [v (->value x)]\n                             (fn [{:keys [pred]}]\n                               (and (ifn? pred) (pred v)))))\n      (throw (ex-info (str \"cannot find matching viewer for value\")\n                      {:value (->value x) :viewers viewers :x x}))))\n\n#_(viewer-for default-viewers [1 2 3])\n#_(viewer-for default-viewers {:nextjournal/value [1 2 3]})\n#_(viewer-for default-viewers 42)\n#_(viewer-for default-viewers (with-viewer :html [:h1 \"Hello Hiccup\"]))\n#_(viewer-for default-viewers (with-viewer {:transform-fn identity} [:h1 \"Hello Hiccup\"]))\n\n(defn ensure-wrapped-with-viewers\n  ([x] (ensure-wrapped-with-viewers (get-viewers *ns*) x))\n  ([viewers x]\n   (-> x\n       ensure-wrapped\n       (update :nextjournal/viewers (fn [x-viewers] (or x-viewers viewers))))))\n\n#_(ensure-wrapped-with-viewers 42)\n#_(ensure-wrapped-with-viewers {:nextjournal/value 42 :nextjournal/viewers [:boo]})\n\n(defn ->opts [wrapped-value]\n  (select-keys wrapped-value [:nextjournal/css-class :nextjournal/width :nextjournal/opts :!budget :budget :path :current-path :offset]))\n\n(defn apply-viewers* [wrapped-value]\n  (when (empty? (->viewers wrapped-value))\n    (throw (ex-info \"cannot apply empty viewers\" {:wrapped-value wrapped-value})))\n  (let [viewers (->viewers wrapped-value)\n        {:as viewer :keys [render-fn transform-fn]} (viewer-for viewers wrapped-value)\n        transformed-value (ensure-wrapped-with-viewers viewers\n                                                       (cond-> (dissoc wrapped-value :nextjournal/viewer)\n                                                         transform-fn transform-fn))\n        wrapped-value' (cond-> transformed-value\n                         (-> transformed-value ->value wrapped-value?)\n                         (merge (->value transformed-value)))]\n    (if (and transform-fn (not render-fn))\n      (recur wrapped-value')\n      (-> wrapped-value'\n          (assoc :nextjournal/viewer viewer)\n          (merge (->opts wrapped-value))))))\n\n(defn apply-viewers [x]\n  (apply-viewers* (ensure-wrapped-with-viewers x)))\n\n#_(apply-viewers 42)\n#_(apply-viewers {:one :two})\n#_(apply-viewers {:one :two})\n#_(apply-viewers [1 2 3])\n#_(apply-viewers (range 3))\n#_(apply-viewers (clojure.java.io/file \"notebooks\"))\n#_(apply-viewers (md \"# Hello\"))\n#_(apply-viewers (html [:h1 \"hi\"]))\n#_(apply-viewers (with-viewer :elision {:remaining 10 :count 30 :offset 19}))\n#_(apply-viewers (with-viewer (->Form '(fn [name] (html [:<> \"Hello \" name]))) \"James\"))\n#_(apply-viewers (with-viewers [{:pred (constantly true) :render-fn '(fn [x] [:h1 \"hi\"])}] 42))\n\n(defn count-viewers\n  \"Helper function to walk a given `x` and replace the viewers with their counts. Useful for debugging.\"\n  [x]\n  (w/postwalk #(if (wrapped-value? %)\n                 (cond-> (dissoc % :!budget)\n                   (:nextjournal/viewers %)\n                   (-> #_%\n                       (update :nextjournal/viewers count)\n                       (set/rename-keys {:nextjournal/viewers :nextjournal/viewers-count})))\n                 %) x))\n\n(defn bounded-count-opts [n xs]\n  (when-not (number? n)\n    (throw (ex-info \"n must be a number?\" {:n n :xs xs})))\n  (let [limit (+ n #?(:clj config/*bounded-count-limit* :cljs 10000))\n        total (try (bounded-count limit xs)\n                   (catch #?(:clj Exception :cljs js/Error) _\n                     nil))]\n    (cond-> {}\n      total (assoc :total total)\n      (or (not total) (= total limit)) (assoc :unbounded? true))))\n\n#_(bounded-count-opts 20 (range))\n#_(bounded-count-opts 20 (range 3234567))\n\n(defn drop+take-xf\n  \"Takes a map with optional `:n` and `:offset` and returns a transducer that drops `:offset` and takes `:n`.\"\n  [{:keys [n offset]\n    :or {offset 0}}]\n  (cond-> (drop offset)\n    (int? n)\n    (comp (take n))))\n\n#_(sequence (drop+take-xf {:n 10}) (range 100))\n#_(sequence (drop+take-xf {:n 10 :offset 10}) (range 100))\n#_(sequence (drop+take-xf {}) (range 9))\n\n(declare assign-closing-parens)\n\n(defn process-render-fn [{:as viewer :keys [render-fn]}]\n  (cond-> viewer\n    (and render-fn (not (viewer-fn? render-fn)))\n    (update :render-fn ->viewer-fn)))\n\n(defn hash-sha1 [x]\n  #?(:clj (analyzer/valuehash :sha1 x)\n     :cljs (let [hasher (goog.crypt.Sha1.)]\n             (.update hasher (goog.crypt/stringToUtf8ByteArray (pr-str x)))\n             (.digest hasher))))\n\n(defn process-viewer [viewer]\n  (if-not (map? viewer)\n    viewer\n    (-> viewer\n        (dissoc :pred :transform-fn :update-viewers-fn)\n        (as-> viewer (assoc viewer :hash (hash-sha1 viewer)))\n        (process-render-fn))))\n\n#_(process-viewer {:render-fn '#(vector :h1) :transform-fn mark-presented})\n\n(def processed-keys\n  (into [:path :offset :n :nextjournal/content-type :nextjournal/value]\n        (-> viewer-opts-normalization vals set (disj :nextjournal/viewers))))\n\n(defn process-wrapped-value [wrapped-value]\n  (-> wrapped-value\n      (select-keys processed-keys)\n      (update :nextjournal/viewer process-viewer)))\n\n#_(process-wrapped-value (apply-viewers 42))\n\n(defn make-elision [viewers fetch-opts]\n  (->> (with-viewer :elision fetch-opts)\n       (ensure-wrapped-with-viewers viewers)\n       apply-viewers\n       process-wrapped-value))\n\n#_(make-elision default-viewers {:n 20})\n\n(defn find-elision [desc]\n  (->value (first (filter (comp #{:elision} :name :nextjournal/viewer)\n                          (tree-seq (some-fn map? vector?) #(cond-> % (map? %) vals) desc)))))\n\n(defn ->fetch-opts [wrapped-value]\n  (merge {:n (-> wrapped-value ->viewer :page-size)}\n         (select-keys wrapped-value [:path :offset])))\n\n(defn get-elision [wrapped-value]\n  (let [{:as fetch-opts :keys [path offset n]} (->fetch-opts wrapped-value)]\n    (merge fetch-opts (bounded-count-opts n (->value wrapped-value)))))\n\n#_(get-elision (present (range)))\n#_(get-elision (present \"abc\"))\n#_(get-elision (present (str/join (repeat 1000 \"abc\"))))\n\n(defn get-fetch-opts-n [wrapped-value]\n  (-> wrapped-value ->fetch-opts :n))\n\n(defn inherit-opts [{:as wrapped-value :nextjournal/keys [viewers]} value path-segment]\n  (-> (ensure-wrapped-with-viewers viewers value)\n      (merge (select-keys (->opts wrapped-value) [:!budget :budget :path :current-path]))\n      (update :path (fnil conj []) path-segment)\n      (update :current-path (fnil conj []) path-segment)))\n\n(defn present+paginate-children [{:as wrapped-value :nextjournal/keys [viewers preserve-keys?] :keys [!budget budget]}]\n  (let [{:as fetch-opts :keys [path offset n]} (->fetch-opts wrapped-value)\n        xs (->value wrapped-value)\n        paginate? (and (number? n) (not preserve-keys?))\n        fetch-opts' (cond-> fetch-opts\n                      (and paginate? !budget (not (map-entry? xs)))\n                      (update :n min @!budget))\n        children (if preserve-keys?\n                   (into {} (map (fn [[k v]] [k (present* (inherit-opts wrapped-value v k))])) xs)\n                   (into []\n                         (comp (if paginate? (drop+take-xf fetch-opts') identity)\n                               (map-indexed (fn [i x] (present* (inherit-opts wrapped-value x (+ i (or offset 0))))))\n                               (remove nil?))\n                         (ensure-sorted xs)))\n        {:as elision :keys [total unbounded?]} (and paginate? (get-elision wrapped-value))\n        new-offset (when paginate? (or (some-> children peek :path peek inc) 0))]\n    (cond-> children\n      (and paginate? (or unbounded? (< new-offset total)))\n      (conj (let [fetch-opts (assoc elision :offset new-offset)]\n              (make-elision viewers fetch-opts))))))\n\n(defn present+paginate-string [{:as wrapped-value :nextjournal/keys [viewers viewer value]}]\n  (let [{:as elision :keys [n total path offset]} (and (:page-size viewer)\n                                                       (get-elision wrapped-value))]\n    (if (and n (< n total))\n      (let [new-offset (min (+ (or offset 0) n) total)]\n        (cond-> [(subs value (or offset 0) new-offset)]\n          (pos? (- total new-offset)) (conj (let [fetch-opts (-> elision\n                                                                 (assoc :offset new-offset :replace-path (conj path new-offset)))]\n                                              (make-elision viewers fetch-opts)))\n          true ensure-wrapped))\n      value)))\n\n\n(defn ^:private present* [{:as wrapped-value\n                           :keys [path current-path !budget]\n                           :nextjournal/keys [viewers]}]\n  (when (empty? viewers)\n    (throw (ex-info \"cannot present* with empty viewers\" {:wrapped-value wrapped-value})))\n  (let [{:as wrapped-value :nextjournal/keys [viewers presented?]} (apply-viewers* wrapped-value)\n        descend? (< (count current-path)\n                    (count path))\n        xs (->value wrapped-value)]\n    #_(prn :xs xs :type (type xs) :path path :current-path current-path :descend? descend?)\n    (when (and !budget (not descend?) (not presented?))\n      (swap! !budget #(max (dec %) 0)))\n    (-> (merge (->opts wrapped-value)\n               (with-viewer (->viewer wrapped-value)\n                 (cond presented?\n                       wrapped-value\n\n                       descend? ;; TODO: can this be unified, simplified, or even dropped in favor of continuation?\n                       (let [idx (first (drop (count current-path) path))]\n                         (present* (-> (ensure-wrapped-with-viewers\n                                        viewers\n                                        (cond (and (map? xs) (keyword? idx)) (get xs idx)\n                                              (or (map? xs) (set? xs)) (nth (seq (ensure-sorted xs)) idx)\n                                              (associative? xs) (get xs idx)\n                                              (sequential? xs) (nth xs idx)))\n                                       (merge (->opts wrapped-value))\n                                       (update :current-path (fnil conj []) idx))))\n\n                       (string? xs)\n                       (present+paginate-string wrapped-value)\n\n                       (and xs (seqable? xs))\n                       (present+paginate-children wrapped-value)\n\n                       :else ;; leaf value\n                       xs)))\n        process-wrapped-value)))\n\n(defn assign-content-lengths [wrapped-value]\n  (w/postwalk\n   (fn [x]\n     (if-let [value (and (wrapped-value? x) (:nextjournal/value x))]\n       (let [{:nextjournal/keys [viewer]} x\n             {:keys [name opening-paren closing-paren]} viewer\n             elision-content-length 6]\n         (assoc x\n                :content-length\n                (cond\n                  (or (nil? value) (char? value) (string? value) (keyword? value) (symbol? value) (number? value))\n                  (count (pr-str value))\n                  (contains? #{:elision} name)\n                  elision-content-length\n                  (contains? #{:map-entry} name)\n                  (reduce + 1 (map #(:content-length % 0) value))\n                  (vector? value)\n                  (->> value\n                       (map #(:content-length % 0))\n                       (reduce + (+ (count opening-paren) (count closing-paren)))\n                       (+ (dec (count value))))\n                  :else 0)\n                :type name))\n       x))\n   wrapped-value))\n\n(defn compute-expanded-at [{:as state :keys [indents expanded-at prev-type]}\n                           {:nextjournal/keys [value]\n                            :keys [content-length path type]\n                            :or {content-length 0}}]\n  (let [max-length (- 80 (reduce + 0 indents))\n        expanded? (< max-length content-length)\n        state' (assoc state\n                      :expanded-at (assoc expanded-at path expanded?)\n                      :prev-type type\n                      :indents (conj\n                                (->> indents (take (count path)) vec)\n                                (cond\n                                  (contains? #{:map-entry} prev-type) (or content-length 0)\n                                  (vector? value) 2\n                                  :else 1)))]\n    (if (vector? value)\n      (reduce compute-expanded-at state' value)\n      state')))\n\n(defn collect-expandable-paths [state {:nextjournal/keys [value] :keys [path]}]\n  (let [state' (assoc-in state [:expanded-at path] false)]\n    (if (vector? value)\n      (reduce collect-expandable-paths state' value)\n      state')))\n\n(defn assign-expanded-at [{:as wrapped-value :keys [content-length]}]\n  (assoc wrapped-value :nextjournal/expanded-at (:expanded-at (if content-length\n                                                                (compute-expanded-at {:expanded-at {}} wrapped-value)\n                                                                (collect-expandable-paths {:expanded-at {}} wrapped-value)))))\n\n(comment\n  (:nextjournal/expanded-at (present {:a-vector [1 2 3] :a-list '(123 234 345) :a-set #{1 2 3 4}}))\n  (= (count \"[1 2 [1 [2] 3] 4 5]\")\n     (:content-length (assign-content-lengths (present [1 2 [1 [2] 3] 4 5]))))\n  (= (count \"{:a-vector [1 2 3] :a-list (123 234 345) :a-set #{1 2 3 4}}\")\n     (:content-length (assign-content-lengths (present {:a-vector [1 2 3] :a-list '(123 234 345) :a-set #{1 2 3 4}}))))\n  ;; Check for elisions as well\n  (assign-content-lengths (present {:foo (vec (repeat 2 {:baz (range 30) :fooze (range 40)})) :bar (range 20)})))\n\n(defn present\n  \"Returns a subset of a given `value`.\"\n  ([x] (present x {}))\n  ([x opts]\n   (-> (ensure-wrapped-with-viewers x)\n       (merge {:!budget (atom (:budget opts 200))\n               :path (:path opts [])\n               :current-path (:current-path opts [])}\n              opts)\n       present*\n       assign-closing-parens)))\n\n(comment\n  (present [\\a \\b])\n  (present [42])\n  (-> (present (range 100)) ->value peek)\n  (present {:hello [1 2 3]})\n  (present {:one [1 2 3] 1 2 3 4})\n  (present [1 2 [1 [2] 3] 4 5])\n  (present (clojure.java.io/file \"notebooks\"))\n  (present {:viewers [{:pred sequential? :render-fn pr-str}]} (range 100))\n  (present (map vector (range)))\n  (present (subs (slurp \"/usr/share/dict/words\") 0 1000))\n  (present (plotly {:data [{:z [[1 2 3] [3 2 1]] :type \"surface\"}]}))\n  (present [(with-viewer :html [:h1 \"hi\"])])\n  (present (with-viewer :html [:ul (for [x (range 3)] [:li x])]))\n  (present (range))\n  (present {1 [2]})\n  (present (with-viewer '(fn [name] (html [:<> \"Hello \" name])) \"James\"))\n  (present {:foo (vec (repeat 2 {:baz (range 30) :fooze (range 40)})) :bar (range 20)}))\n\n(defn desc->values\n  \"Takes a `description` and returns its value. Inverse of `present`. Mostly useful for debugging.\"\n  [desc]\n  (let [x (->value desc)\n        viewer-name (-> desc ->viewer :name)]\n    (cond (= viewer-name :elision) (with-meta '\u2026 x)\n          (coll? x) (into (case viewer-name\n                            ;; TODO: fix table viewer\n                            (:map :table) {}\n                            (or (empty x) []))\n                          (map desc->values)\n                          x)\n          :else x)))\n\n#_(desc->values (present [1 [2 {:a :b} 2] 3 (range 100)]))\n#_(desc->values (present (table (mapv vector (range 30)))))\n#_(desc->values (present (with-viewer :table (normalize-table-data (repeat 60 [\"Adelie\" \"Biscoe\" 50 30 200 5000 :female])))))\n\n(defn path-to-value [path]\n  (conj (interleave path (repeat :nextjournal/value)) :nextjournal/value))\n\n(defn merge-presentations [root more elision]\n  (update-in root\n             (path-to-value (:path elision))\n             (fn [value]\n               (let [{:keys [offset path]} (-> value peek :nextjournal/value)\n                     path-from-value (conj path offset)\n                     path-from-more (or (:replace-path elision) ;; string case, TODO find a better way to unify\n                                        (-> more :nextjournal/value first :path))]\n                 (when (not= path-from-value path-from-more)\n                   (throw (ex-info \"paths mismatch\" {:path-from-value path-from-value :path-from-more path-from-more :root root :more more :path-to-value (path-to-value (:path more)) :value value})))\n                 (into (pop value) (:nextjournal/value more))))))\n\n\n(defn assign-closing-parens\n  ([node] (assign-closing-parens '() node))\n  ([closing-parens node]\n   (let [value (->value node)\n         viewer (->viewer node)\n         closing (:closing-paren viewer)\n         non-leaf? (and (vector? value) (wrapped-value? (first value)))\n         defer-closing? (and non-leaf?\n                             (or (-> value last :nextjournal/viewer :closing-paren) ;; the last element can carry parens\n                                 (and (= :map-entry (-> value last :nextjournal/viewer :name)) ;; the last element is a map entry whose value can carry parens\n                                      (-> value last :nextjournal/value last :nextjournal/viewer :closing-paren))))]\n     (cond-> (cond\n               (not closing) node\n               defer-closing? (update node :nextjournal/viewer dissoc :closing-paren)\n               :else (update-in node [:nextjournal/viewer :closing-paren] cons closing-parens))\n       non-leaf? (update :nextjournal/value\n                         (fn [xs]\n                           (into []\n                                 (map-indexed (fn [i x]\n                                                (assign-closing-parens (if (and defer-closing? (= (dec (count xs)) i))\n                                                                         (cond->> closing-parens closing (cons closing))\n                                                                         '())\n                                                                       x)))\n                                 xs)))))))\n\n(defn reset-viewers!\n  ([viewers] (reset-viewers! *ns* viewers))\n  ([scope viewers]\n   (assert (or (#{:default} scope)\n               #?(:clj (instance? clojure.lang.Namespace scope))))\n   (swap! !viewers assoc scope viewers)))\n\n(defn add-viewers! [viewers]\n  (reset-viewers! *ns* (add-viewers (get-default-viewers) viewers))\n  viewers)\n\n\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; public convenience api\n(def html         (partial with-viewer html-viewer))\n(def md           (partial with-viewer markdown-viewer))\n(def plotly       (partial with-viewer plotly-viewer))\n(def vl           (partial with-viewer vega-lite-viewer))\n(def table        (partial with-viewer table-viewer))\n(def row          (partial with-viewer-extracting-opts row-viewer))\n(def col          (partial with-viewer-extracting-opts col-viewer))\n(def tex          (partial with-viewer katex-viewer))\n(def notebook     (partial with-viewer (:name notebook-viewer)))\n(def code         (partial with-viewer code-viewer))\n\n(defn ^:dynamic doc-url [path] (str \"#/\" path))\n\n(defn hide-result\n  \"Deprecated, please put ^{:nextjournal.clerk/visibility {:result :hide}} metadata on the form instead.\"\n  {:deprecated \"0.10\"}\n  ([x] #?(:clj (hide-result {} x)) :cljs x)\n  ([_viewer-opts x]\n   #?(:clj (binding [*out* *err*]\n             (prn \"`hide-result` has been deprecated, please put `^{:nextjournal.clerk/visibility {:result :hide}}` metadata on the form instead.\")))\n   x))\n\n(def eval-cljs-result-viewer\n  {:transform-fn mark-presented\n   :render-fn '(fn [x]\n                 [nextjournal.clerk.render/inspect x])})\n\n(defn eval-cljs-str [code-string]\n  ;; NOTE: this relies on implementation details on how SCI code is evaluated\n  ;; and will change in a future version of Clerk\n\n  ;; because ViewerEval's are evaluated at read time we can no longer\n  ;; check after read if there was any in the doc. Thus we set the\n  ;; `:nextjournal.clerk/remount` attribute to a hash of the code (so\n  ;; it changes when the code changes and shows up in the doc patch.\n  ;; TODO: simplify, maybe by applying Clerk's analysis to the cljs\n  ;; part as well\n  (with-viewer (assoc eval-cljs-result-viewer :nextjournal.clerk/remount (hash-sha1 code-string) )\n    (->viewer-eval (list 'binding '[*ns* *ns*]\n                         (list 'load-string code-string)))))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; examples\n(def example-viewer\n  {:transform-fn (fn [{:as wrapped-value :nextjournal/keys [viewers] :keys [path current-path]}]\n                   (-> wrapped-value\n                       mark-preserve-keys\n                       (assoc :nextjournal/viewer {:render-fn '(fn [{:keys [form val]} opts]\n                                                                 [:div.flex.flex-wrap\n                                                                  {:class \"py-[7px]\"}\n                                                                  [:div [:div.bg-slate-100.px-2.rounded\n                                                                         (nextjournal.clerk.render/inspect-presented opts form)]]\n                                                                  [:div.flex.mt-1\n                                                                   [:div.mx-2.font-sans.text-xs.text-slate-500 {:class \"mt-[2px]\"} \"\u21d2\"]\n                                                                   (nextjournal.clerk.render/inspect-presented opts val)]])})\n                       (update-in [:nextjournal/value :form] code)))})\n\n(def examples-viewer\n  {:transform-fn (update-val (fn [examples]\n                               (mapv (partial with-viewer example-viewer) examples)))\n   :render-fn '(fn [examples opts]\n                 (into [:div.border-l-2.border-slate-300.pl-4\n                        [:div.uppercase.tracking-wider.text-xs.font-sans.text-slate-500.mt-4.mb-2 \"Examples\"]]\n                       (nextjournal.clerk.render/inspect-children opts) examples))})\n"]}