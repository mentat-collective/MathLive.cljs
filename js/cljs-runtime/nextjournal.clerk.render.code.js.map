{"version":3,"sources":["nextjournal/clerk/render/code.cljs"],"mappings":"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","names":["nextjournal.clerk.render.code/highlight-style","js/module$node_modules$$codemirror$language$dist$index_cjs.HighlightStyle","cljs.core/clj->js","js/module$node_modules$$lezer$highlight$dist$index_cjs.tags","var_args","G__68369","nextjournal.clerk.render.code/rangeset-seq","js/Error","rset","nextjournal.clerk.render.code.rangeset_seq","from","iterator","temp__5757__auto__","val","to","cljs.core/cons","cljs.core/LazySeq","step","p__68374","map__68376","cljs.core/--destructure-map","cljs.core.get","nextjournal.clerk.render.code/style-markup","text","map__68378","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","obj68380","js/undefined","obj68381","tagName","class","cljs.core.keyword","cljs.core/str","cljs.core.interpose","clojure.string.split","nextjournal.clerk.render.code/style-line","decos","i","map__68384","obj68387","obj68388","cljs.core.into","pos","lds","p1__68383#","cljs.core.take_while","buf","temp__5755__auto__","map__68393","d","start","end","cljs.core/first","cljs.core/next","cljs.core.concat","G__68394","cljs.core/List","cljs.core.conj","G__68392","nextjournal.clerk.render.code/render-code","code","builder","js/module$node_modules$$codemirror$state$dist$index_cjs.RangeSetBuilder","_","js/module$node_modules$$lezer$highlight$dist$index_cjs.highlightTree","js/module$node_modules$$nextjournal$lang_clojure$dist$index_cjs.clojureLanguage","style","js/module$node_modules$$codemirror$view$dist$index_cjs.Decoration","decorations-rangeset","js/module$node_modules$$codemirror$state$dist$index_cjs.Text","cljs.core.map","cljs.core.partial","cljs.core.range","nextjournal.clerk.render.code/theme","js/module$node_modules$$codemirror$view$dist$index_cjs.EditorView","nextjournal.clerk.render.code/complete-keymap","js/module$node_modules$$codemirror$view$dist$index_cjs.keymap","nextjournal.clojure-mode.keymap/complete","nextjournal.clerk.render.code/builtin-keymap","nextjournal.clojure-mode.keymap/builtin","nextjournal.clerk.render.code/paredit-keymap","nextjournal.clojure-mode.keymap/paredit","nextjournal.clerk.render.code/read-only","nextjournal.clerk.render.code/on-change-ext","f","js/module$node_modules$$codemirror$state$dist$index_cjs.EditorState","tr","G__68405","nextjournal.clerk.render.code/default-extensions","nextjournal.clojure-mode/default-extensions","js/module$node_modules$$codemirror$language$dist$index_cjs.syntaxHighlighting","nextjournal.clerk.render.code/make-state","doc","extensions","nextjournal.clerk.render.code/make-view","state","parent","G__68416","nextjournal.clerk.render.code/editor","p__68418","map__68419","!code-str","nextjournal.clerk.render.code.editor","on-change","!container-el","nextjournal.clerk.render.hooks.use_ref","!view","nextjournal.clerk.render.hooks.use_effect","view","cljs.core/reset!","cljs.core/deref","G__68420","cljs.core/seq","cljs.core.not_EQ_"],"sourcesContent":["(ns nextjournal.clerk.render.code\n  (:require [\"@codemirror/language\" :refer [HighlightStyle syntaxHighlighting]]\n            [\"@lezer/highlight\" :refer [tags highlightTree]]\n            [\"@codemirror/state\" :refer [EditorState RangeSetBuilder Text]]\n            [\"@codemirror/view\" :refer [EditorView Decoration keymap]]\n            [\"@nextjournal/lang-clojure\" :refer [clojureLanguage]]\n            [applied-science.js-interop :as j]\n            [clojure.string :as str]\n            [nextjournal.clerk.render.hooks :as hooks]\n            [nextjournal.clojure-mode :as clojure-mode]\n            [nextjournal.clojure-mode.keymap :as clojure-mode.keymap]))\n\n(def highlight-style\n  (.define HighlightStyle\n           (clj->js [{:tag (.-meta tags) :class \"cmt-meta\"}\n                     {:tag (.-link tags) :class \"cmt-link\"}\n                     {:tag (.-heading tags) :class \"cmt-heading\"}\n                     {:tag (.-emphasis tags) :class \"cmt-italic\"}\n                     {:tag (.-strong tags) :class \"cmt-strong\"}\n                     {:tag (.-strikethrough tags) :class \"cmt-strikethrough\"}\n                     {:tag (.-keyword tags) :class \"cmt-keyword\"}\n                     {:tag (.-atom tags) :class \"cmt-atom\"}\n                     {:tag (.-bool tags) :class \"cmt-bool\"}\n                     {:tag (.-url tags) :class \"cmt-url\"}\n                     {:tag (.-contentSeparator tags) :class \"cmt-contentSeparator\"}\n                     {:tag (.-labelName tags) :class \"cmt-labelName\"}\n                     {:tag (.-literal tags) :class \"cmt-literal\"}\n                     {:tag (.-inserted tags) :class \"cmt-inserted\"}\n                     {:tag (.-string tags) :class \"cmt-string\"}\n                     {:tag (.-deleted tags) :class \"cmt-deleted\"}\n                     {:tag (.-regexp tags) :class \"cmt-regexp\"}\n                     {:tag (.-escape tags) :class \"cmt-escape\"}\n                     {:tag (.. tags (special (.-string tags))) :class \"cmt-string\"}\n                     {:tag (.. tags (definition (.-variableName tags))) :class \"cmt-variableName\"}\n                     {:tag (.. tags (local (.-variableName tags))) :class \"cmt-variableName\"}\n                     {:tag (.-typeName tags) :class \"cmt-typeName\"}\n                     {:tag (.-namespace tags) :class \"cmt-namespace\"}\n                     {:tag (.-className tags) :class \"cmt-className\"}\n                     {:tag (.. tags (special (.-variableName tags))) :class \"cmt-variableName\"}\n                     {:tag (.-macroName tags) :class \"cmt-macroName\"}\n                     {:tag (.. tags (definition (.-propertyName tags))) :class \"cmt-propertyName\"}\n                     {:tag (.-comment tags) :class \"cmt-comment\"}\n                     {:tag (.-invalid tags) :class \"cmt-invalid\"}])))\n\n(defn rangeset-seq\n  \"Returns a lazy-seq of ranges inside a RangeSet (like a Decoration set)\"\n  ([rset] (rangeset-seq rset 0))\n  ([^js rset from]\n   (let [iterator (.iter rset from)]\n     ((fn step []\n        (when-some [val (.-value iterator)]\n          (let [from (.-from iterator) to (.-to iterator)]\n            (.next iterator)\n            (cons {:from from :to to :val val}\n                  (lazy-seq (step))))))))))\n\n(defn style-markup [^js text {:keys [from to val]}]\n  (j/let [^js {:keys [tagName class]} val]\n    [(keyword (apply str tagName (when class\n                                   (cons \".\" (interpose \".\" (str/split class #\" \"))))))\n     (.sliceString text from to)]))\n\n(defn style-line [decos ^js text i]\n  (j/let [^js {:keys [from to]} (.line text i)]\n    ;; NOTE: these styles are partially overlapping with those for the `.viewer-code` container\n    ;; but are needed to fix rendered code _outside_ of it. e.g. in Clerk results\n    (into [:div.cm-line {:style {:padding \"0\"\n                                 :line-height \"1.6\"\n                                 :font-size \"15px\"\n                                 :font-family \"\\\"Fira Mono\\\", monospace\"}}]\n          (loop [pos from\n                 lds (take-while #(<= (:to %) to) (rangeset-seq decos from))\n                 buf ()]\n            (if-some [{:as d start :from end :to} (first lds)]\n              (recur end\n                     (next lds)\n                     (concat buf (cond-> (list (style-markup text d))\n                                   (< pos start)\n                                   (conj (.sliceString text pos start)))))\n              (cond-> buf\n                (< pos to)\n                (concat [(.sliceString text pos to)])))))))\n\n\n(defn render-code [^String code]\n  (let [builder (RangeSetBuilder.)\n        _ (highlightTree (.. clojureLanguage -parser (parse code)) highlight-style\n                         (fn [from to style]\n                           (.add builder from to (.mark Decoration (j/obj :class style)))))\n        decorations-rangeset (.finish builder)\n        text (.of Text (.split code \"\\n\"))]\n    [:div.cm-editor\n     [:cm-scroller\n      (into [:div.cm-content.whitespace-pre]\n            (map (partial style-line decorations-rangeset text))\n            (range 1 (inc (.-lines text))))]]))\n\n;; editable code viewer\n(def theme\n  (.theme EditorView\n          (j/lit {\"&.cm-focused\" {:outline \"none\"}\n                  \".cm-line\" {:padding \"0\"\n                              :line-height \"1.6\"\n                              :font-size \"15px\"\n                              :font-family \"\\\"Fira Mono\\\", monospace\"}\n                  \".cm-matchingBracket\" {:border-bottom \"1px solid var(--teal-color)\"\n                                         :color \"inherit\"}\n\n                  ;; only show cursor when focused\n                  \".cm-cursor\" {:visibility \"hidden\"}\n                  \"&.cm-focused .cm-cursor\" {:visibility \"visible\"\n                                             :animation \"steps(1) cm-blink 1.2s infinite\"}\n                  \"&.cm-focused .cm-selectionBackground\" {:background-color \"Highlight\"}\n                  \".cm-tooltip\" {:border \"1px solid rgba(0,0,0,.1)\"\n                                 :border-radius \"3px\"\n                                 :overflow \"hidden\"}\n                  \".cm-tooltip > ul > li\" {:padding \"3px 10px 3px 0 !important\"}\n                  \".cm-tooltip > ul > li:first-child\" {:border-top-left-radius \"3px\"\n                                                       :border-top-right-radius \"3px\"}})))\n\n(def ^js complete-keymap (.of keymap clojure-mode.keymap/complete))\n(def ^js builtin-keymap (.of keymap clojure-mode.keymap/builtin))\n(def ^js paredit-keymap (.of keymap clojure-mode.keymap/paredit))\n\n(def read-only (.. EditorView -editable (of false)))\n\n(defn on-change-ext [f]\n  (.. EditorState -transactionExtender\n      (of (fn [^js tr]\n            (when (.-docChanged tr) (f (.. tr -state sliceDoc)))\n            #js {}))))\n\n(def ^:export default-extensions\n  #js [clojure-mode/default-extensions\n       (syntaxHighlighting highlight-style)\n       theme])\n\n(defn make-state [doc extensions]\n  (.create EditorState (j/obj :doc doc :extensions extensions)))\n\n(defn make-view [state parent]\n  (EditorView. (j/obj :state state :parent parent)))\n\n(defn editor\n  ([!code-str] (editor !code-str {}))\n  ([!code-str {:keys [extensions on-change]}]\n   (let [!container-el (hooks/use-ref nil)\n         !view (hooks/use-ref nil)]\n     ;; view instance is built only once\n     (hooks/use-effect\n      (fn []\n        (let [^js view\n              (reset! !view (make-view (make-state @!code-str\n                                                   (cond-> default-extensions\n                                                     (seq extensions) (.concat extensions)\n                                                     on-change (.concat (on-change-ext on-change)))) @!container-el))]\n          #(.destroy view))))\n     (hooks/use-effect\n      (fn []\n        (let [^js state (.-state @!view)]\n          (when (not= @!code-str (.sliceDoc state))\n            (.dispatch @!view\n                       (.update state\n                                (j/lit {:changes [{:insert @!code-str\n                                                   :from 0 :to (.. state -doc -length)}]}))))))\n      [@!code-str])\n     [:div {:ref !container-el}])))\n"]}