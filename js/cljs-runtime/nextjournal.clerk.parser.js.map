{"version":3,"sources":["nextjournal/clerk/parser.cljc"],"mappings":"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","names":["nextjournal.clerk.parser/ns?","form","cljs.core/seq?","cljs.core._EQ_","cljs.core/first","nextjournal.clerk.parser/remove-leading-semicolons","s","clojure.string/replace","nextjournal.clerk.parser/legacy-doc-visibility","temp__5753__auto__","visibility","cljs.core/meta","visibility-set","cljs.core/Keyword","cljs.core/set?","or__4253__auto__","p1__66812#","cljs.core/some","cljs.core.get","nextjournal.clerk.parser/legacy-form-visibility","legacy-visibility","visibility-set'","G__66814","cljs.core.conj","cljs.core.merge","p1__66813#","G__66815","cljs.core/name","cljs.core/Symbol","nextjournal.clerk.parser/visibility-marker?","cljs.core/map?","cljs.core/contains?","nextjournal.clerk.parser/parse-visibility","visibility-map","and__4251__auto__","G__66822","cljs.core/PersistentHashMap","cljs.core/every?","cljs.core/keys","cljs.core/vals","cljs.core.ex_info","G__66823","cljs.core.assoc","nextjournal.clerk.parser/->visibility","G__66824","nextjournal.clerk.parser/get-doc-setting","key","G__66825","cljs.core/second","nextjournal.clerk.parser/->doc-visibility","nextjournal.clerk.parser/parse-error-on-missing-vars","first-form","temp__5755__auto__","setting","fexpr__66827","cljs.core.pr_str","nextjournal.clerk.parser/->doc-settings","G__66829","fexpr__66828","cljs.core.filter","p__66831","map__66832","cljs.core/--destructure-map","nextjournal.clerk.parser/->open-graph","title","blocks","cljs.core.sequence","cljs.core.comp","cljs.core.keep","cljs.core.mapcat","cljs.core.map","nextjournal.markdown.transform/->text","p1__66830#","nextjournal.clerk.parser/add-open-graph-metadata","doc","p__66833","map__66834","nextjournal.clerk.parser/add-auto-expand-results","p__66835","map__66836","p__66837","map__66838","nextjournal.clerk.parser/add-css-class","p__66839","map__66840","p__66846","map__66848","nextjournal.clerk.parser/add-block-visibility","analyzed-doc","cljs.core.reduce","p__66849","p__66850","map__66851","map__66852","state","block","var","type","visibility'","G__66853","cljs.core.update","cljs.core/conj","G__66854","cljs.core.dissoc","nextjournal.clerk.parser/code-tags","nextjournal.clerk.parser/whitespace-on-line-tags","var_args","G__66861","nextjournal.clerk.parser/parse-clojure-string","js/Error","p__66869","map__66870","nextjournal.clerk.parser.parse_clojure_string","opts","_opts","doc?","initial-state","G__66872","map__66873","map__66882","nodes","add-comment-on-line?","rewrite-clj.parser/parse-string-all","temp__5751__auto__","node","G__66883","rewrite-clj.node/tag","cljs.core/rest","rewrite-clj.node/string","clojure.set/rename-keys","cljs.core/select-keys","G__66885","rewrite-clj.node/comment?","cljs.core.update_in","cljs.core/count","cljs.core/str","clojure.string/trim-newline","cljs.core.drop_while","cljs.core.some_fn","rewrite-clj.node/linebreak?","cljs.core.apply","cljs.core.take_while","nextjournal.markdown/parse","cljs.core.into","nextjournal.markdown.parser/add-title+toc","p__66889","map__66890","nextjournal.clerk.parser/code-cell?","p__66891","map__66892","nextjournal.clerk.parser/parse-markdown-cell","p__66904","map__66905","nextjournal.clerk.parser/parse-markdown-string","map__66908","content","toc","G__66910","map__66911","map__66917","md-slice","p1__66898#","G__66922","cljs.core/seq","G__66924","p1__66903#","G__66918"],"sourcesContent":["(ns nextjournal.clerk.parser\n  \"Clerk's Parser turns Clojure & Markdown files and strings into Clerk documents.\"\n  (:require [clojure.core :as core]\n            [clojure.set :as set]\n            [clojure.string :as str]\n            [nextjournal.markdown :as markdown]\n            [nextjournal.markdown.parser :as markdown.parser]\n            [nextjournal.markdown.transform :as markdown.transform]\n            [rewrite-clj.node :as n]\n            [rewrite-clj.parser :as p]))\n\n(defn ns? [form]\n  (and (seq? form) (= 'ns (first form))))\n\n(defn remove-leading-semicolons [s]\n  (str/replace s #\"^[;]+\" \"\"))\n\n\n(defn ^:private legacy-doc-visibility [form]\n  (when-let [visibility (-> form meta :nextjournal.clerk/visibility)]\n    (when-let [visibility-set (cond\n                                (keyword? visibility) #{visibility}\n                                (set? visibility) visibility)]\n      {:code (or (some #(get visibility-set %) [:hide :fold]) :show)})))\n\n#_(legacy-doc-visibility '^{:nextjournal.clerk/visibility :hide-ns} (ns foo))\n#_(legacy-doc-visibility '^{:nextjournal.clerk/visibility :fold} (ns foo))\n#_(legacy-doc-visibility '^{:nextjournal.clerk/visibility :hide} (ns foo))\n\n(defn ^:private legacy-form-visibility [form visibility]\n  (when-let [legacy-visibility (cond\n                                 (keyword? visibility) #{visibility}\n                                 (set? visibility) visibility)]\n    (let [visibility-set' (cond-> legacy-visibility\n                            (:hide-ns legacy-visibility) (conj legacy-visibility :hide))]\n      (merge {:code (or (some #(get visibility-set' %) [:hide :fold]) :show)}\n             (when (or (some-> form meta :nextjournal.clerk/viewer name (= \"hide-result\"))\n                       (and (seq? form) (symbol? (first form)) (= \"hide-result\" (name (first form)))))\n               {:result :hide})))))\n\n#_(legacy-form-visibility '^{:nextjournal.clerk/visibility :hide-ns} (ns foo) :hide-ns)\n#_(legacy-form-visibility '^{:nextjournal.clerk/visibility :fold} (ns foo) :fold)\n#_(legacy-form-visibility '^{:nextjournal.clerk/visibility :hide} (ns foo) :hide)\n#_(legacy-form-visibility '^{:nextjournal.clerk/visibility :show :nextjournal.clerk/viewer :hide-result} (def my-range (range 600)) :show)\n#_(legacy-form-visibility '^{:nextjournal.clerk/visibility :show :nextjournal.clerk/viewer nextjournal.clerk/hide-result} (def my-range (range 500)) :show)\n\n(defn visibility-marker? [form]\n  (and (map? form) (contains? form :nextjournal.clerk/visibility)))\n\n(defn parse-visibility [form visibility]\n  (or (legacy-form-visibility form visibility) ;; TODO: drop legacy visibiliy support before 1.0\n      (when-let [visibility-map (and visibility (cond->> visibility (not (map? visibility)) (hash-map :code)))]\n        (when-not (and (every? #{:code :result} (keys visibility-map))\n                       (every? #{:hide :show :fold} (vals visibility-map)))\n          (throw (ex-info \"Invalid `:nextjournal.clerk/visibility`, please pass a map with `:code` and `:result` keys, allowed values are `:hide`, `:show` and `:fold`.\"\n                          (cond-> {:visibility visibility}\n                            form (assoc :form form)))))\n        visibility-map)))\n\n#_(parse-visibility nil nil)\n#_(parse-visibility nil {:code :fold :result :hide})\n\n(defn ->visibility [form]\n  (if (visibility-marker? form)\n    {:code :hide :result :hide}\n    (cond-> (parse-visibility form (-> form meta :nextjournal.clerk/visibility))\n      (ns? form) (merge {:result :hide}))))\n\n#_(->visibility (quote ^{:nextjournal.clerk/visibility :fold} (ns foo)))\n#_(->visibility '(foo :bar))\n#_(->visibility (quote (ns foo {:nextjournal.clerk/visibility {:code :fold :result :hide}})))\n#_(->visibility (quote ^{:nextjournal.clerk/visibility {:code :fold :result :hide}} (ns foo)))\n#_(->visibility (quote ^{:nextjournal.clerk/visibility :hidden} (ns foo)))\n#_(->visibility (quote ^{:nextjournal.clerk/visibility \"bam\"} (ns foo)))\n#_(->visibility (quote ^{:nextjournal.clerk/visibility #{:hide-ns}} (do :foo)))\n\n(defn get-doc-setting [form key]\n  (or (when (ns? form) (or (some key form)\n                           (-> form second meta key)))\n      (when (map? form) (get form key))))\n\n(defn ->doc-visibility [form]\n  (cond\n    ;; TODO: drop legacy visibility support before 1.0\n    (and (ns? form) (legacy-doc-visibility form))\n    (legacy-doc-visibility form)\n\n    (or (ns? form) (visibility-marker? form))\n    (parse-visibility form (get-doc-setting form :nextjournal.clerk/visibility))))\n\n#_(->doc-visibility '(ns foo \"my docs\" {:nextjournal.clerk/visibility {:code :fold :result :hide}}))\n#_(->doc-visibility '{:nextjournal.clerk/visibility {:code :fold}})\n#_(->doc-visibility '(ns foo \"my docs\" {}))\n#_(->doc-visibility '(ns ^{:nextjournal.clerk/visibility {:code :fold :result :hide}} foo))\n#_(->doc-visibility '(ns ^{:nextjournal.clerk/visibility {:code :fold}} foo\n                       {:nextjournal.clerk/visibility {:result :hide}}))\n\n(defn parse-error-on-missing-vars [first-form]\n  (if-some [setting (when (ns? first-form)\n                      (get-doc-setting first-form :nextjournal.clerk/error-on-missing-vars))]\n    (do (when-not (#{:on :off} setting)\n          (throw (ex-info (str \"Invalid setting `\" (pr-str setting) \"` for `:nextjournal.clerk/error-on-missing-vars`. Valid values are `:on` and `:off`.\")\n                          {:nextjournal.clerk/error-on-missing-vars setting})))\n        setting)\n    (if (ns? first-form) :on :off)))\n\n(defn ->doc-settings [first-form]\n  {:ns? (ns? first-form)\n   :error-on-missing-vars (parse-error-on-missing-vars first-form)\n   :toc-visibility (or (#{true :collapsed} (:nextjournal.clerk/toc\n                                            (merge (-> first-form meta) ;; TODO: deprecate\n                                                   (when (ns? first-form)\n                                                     (merge (-> first-form second meta)\n                                                            (first (filter map? first-form)))))))\n                       false)})\n\n(defn ->open-graph [{:keys [title blocks]}]\n  (merge {:type \"article:clerk\"\n          :title title\n          :description (first (sequence\n                               (comp (keep :doc)\n                                     (mapcat :content)\n                                     (filter (comp #{:paragraph} :type))\n                                     (map markdown.transform/->text)) blocks))}\n         (some #(get-doc-setting (:form %) :nextjournal.clerk/open-graph) blocks)))\n\n#_(->open-graph\n   (nextjournal.clerk.analyzer/analyze-doc\n    (parse-file {:doc? true} \"notebooks/open_graph.clj\")))\n\n(defn add-open-graph-metadata [doc] (assoc doc :open-graph (->open-graph doc)))\n\n;; TODO: Unify with get-doc-settings\n(defn add-auto-expand-results [{:as doc :keys [blocks]}]\n  (assoc doc :auto-expand-results? (some (fn [{:keys [form]}]\n                                           (when (ns? form) (some :nextjournal.clerk/auto-expand-results? form)))\n                                         blocks)))\n\n(defn add-css-class [{:as doc :keys [blocks]}]\n  (assoc doc :css-class (some (fn [{:keys [form]}]\n                                (when (ns? form) (some :nextjournal.clerk/css-class form)))\n                              blocks)))\n\n#_(->doc-settings '^{:nextjournal.clerk/toc :boom} (ns foo)) ;; TODO: error\n\n(defn add-block-visibility [{:as analyzed-doc :keys [blocks]}]\n  (-> (reduce (fn [{:as state :keys [visibility]} {:as block :keys [var form type]}]\n                (let [visibility' (merge visibility (->doc-visibility form))]\n                  (cond-> (-> state\n                              (update :blocks conj (cond-> block\n                                                     (= type :code) (assoc :visibility (merge visibility' (->visibility form))))))\n                    (= type :code) (assoc :visibility visibility'))))\n              (assoc analyzed-doc :blocks [] :visibility {:code :show :result :show})\n              blocks)\n      (dissoc :visibility)))\n\n(def code-tags\n  #{:deref :map :meta :list :quote :syntax-quote :reader-macro :set :token :var :vector})\n\n(def whitespace-on-line-tags\n  #{:comment :whitespace :comma})\n\n(defn parse-clojure-string\n  ([s] (parse-clojure-string {} s))\n  ([opts s] (parse-clojure-string opts {:blocks []} s))\n  ([{:as _opts :keys [doc?]} initial-state s]\n   (loop [{:as state :keys [nodes blocks visibility add-comment-on-line?]} (assoc initial-state :nodes (:children (p/parse-string-all s)))]\n     (if-let [node (first nodes)]\n       (recur (cond\n                (code-tags (n/tag node))\n                (-> state\n                    (assoc :add-comment-on-line? true)\n                    (update :nodes rest)\n                    (update :blocks conj {:type :code\n                                          :text (n/string node)\n                                          :loc (-> (meta node)\n                                                   (set/rename-keys {:row :line\n                                                                     :col :column})\n                                                   (select-keys [:line :column]))}))\n\n                (and add-comment-on-line? (whitespace-on-line-tags (n/tag node)))\n                (-> state\n                    (assoc :add-comment-on-line? (not (n/comment? node)))\n                    (update :nodes rest)\n                    (update-in [:blocks (dec (count blocks)) :text] str (-> node n/string str/trim-newline)))\n\n                (and doc? (n/comment? node))\n                (-> state\n                    (assoc :add-comment-on-line? false)\n                    (assoc :nodes (drop-while (some-fn n/comment? n/linebreak?) nodes))\n                    (update :blocks conj {:type :markdown\n                                          :doc (-> (apply str (map (comp remove-leading-semicolons n/string)\n                                                                   (take-while (some-fn n/comment? n/linebreak?) nodes)))\n                                                   markdown/parse\n                                                   (select-keys [:type :content]))}))\n                :else\n                (-> state\n                    (assoc :add-comment-on-line? false)\n                    (update :nodes rest))))\n       (merge (select-keys state [:blocks])\n              (when doc?\n                (-> {:content (into []\n                                    (comp (filter (comp #{:markdown} :type))\n                                          (mapcat (comp :content :doc)))\n                                    blocks)}\n                    markdown.parser/add-title+toc\n                    (select-keys [:title :toc]))))))))\n\n#_(parse-clojure-string {:doc? true} \"'code ;; foo\\n;; bar\")\n#_(parse-clojure-string \"'code , ;; foo\\n;; bar\")\n#_(parse-clojure-string \"'code\\n;; foo\\n;; bar\")\n#_(keys (parse-clojure-string {:doc? true} (slurp \"notebooks/viewer_api.clj\")))\n\n(defn code-cell? [{:as node :keys [type]}]\n  (and (= :code type) (contains? node :info)))\n\n(defn parse-markdown-cell [{:as state :keys [nodes]}]\n  (assoc (parse-clojure-string {:doc? true} state (markdown.transform/->text (first nodes)))\n         :nodes (rest nodes)\n         ::md-slice []))\n\n(defn parse-markdown-string [{:keys [doc?]} s]\n  (let [{:keys [content toc title]} (markdown/parse s)]\n    (loop [{:as state :keys [nodes] ::keys [md-slice]} {:blocks [] ::md-slice [] :nodes content}]\n      (if-some [node (first nodes)]\n        (recur\n         (if (code-cell? node)\n           (-> state\n               (update :blocks #(cond-> % (seq md-slice) (conj {:type :markdown :doc {:type :doc :content md-slice}})))\n               parse-markdown-cell)\n\n           (-> state (update :nodes rest) (cond-> doc? (update ::md-slice conj node)))))\n\n        (-> state\n            (update :blocks #(cond-> % (seq md-slice) (conj {:type :markdown :doc {:type :doc :content md-slice}})))\n            (select-keys [:blocks :visibility])\n            (merge (when doc? {:title title :toc toc})))))))\n\n#?(:clj\n   (defn parse-file\n     ([file] (parse-file {} file))\n     ([opts file] (-> (if (str/ends-with? file \".md\")\n                        (parse-markdown-string opts (slurp file))\n                        (parse-clojure-string opts (slurp file)))\n                      (assoc :file file)))))\n\n#_(parse-file {:doc? true} \"notebooks/visibility.clj\")\n#_(parse-file \"notebooks/visibility.clj\")\n#_(parse-file \"notebooks/elements.clj\")\n#_(parse-file \"notebooks/markdown.md\")\n#_(parse-file {:doc? true} \"notebooks/rule_30.clj\")\n#_(parse-file \"notebooks/src/demo/lib.cljc\")\n"]}