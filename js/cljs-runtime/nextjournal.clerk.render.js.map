{"version":3,"sources":["nextjournal/clerk/render.cljs"],"mappings":"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","names":["reagent.core/set-default-compiler!","reagent.core/create-compiler","nextjournal.clerk.render/nbsp","goog.string/unescapeEntities","nextjournal.clerk.render/reagent-atom?","x","cljs.core/PROTOCOL_SENTINEL","cljs.core/native-satisfies?","reagent.ratom/IReactiveAtom","nextjournal.clerk.render/toc-items","items","cljs.core.reduce","p__77878","map__77879","cljs.core/--destructure-map","cljs.core.get","acc","item","content","children","title","nextjournal.markdown.transform/->text","nextjournal.clerk.viewer/->slug","cljs.core.conj","cljs.core/vec","G__77880","nextjournal.clerk.render/dark-mode-toggle","!state","map__77890","cljs.core/deref","dark-mode?","spring","cljs.core.swap_BANG_","cljs.core/assoc","cljs.core/not","nextjournal.ui.components.motion/svg","nextjournal.ui.components.motion/path","nextjournal.ui.components.motion/circle","nextjournal.ui.components.motion/g","nextjournal.clerk.render/localstorage-set!","key","val","js/window","nextjournal.clerk.render/localstorage-get","cljs.reader.read_string","nextjournal.clerk.render/local-storage-dark-mode-key","nextjournal.clerk.render/set-dark-mode!","class-list","js/document.querySelector","nextjournal.clerk.render/setup-dark-mode!","map__77899","cljs.core/add-watch","p__77900","map__77904","_","old","cljs.core.not_EQ_","js/nextjournal","js/nextjournal.clerk","js/nextjournal.clerk.render","js/nextjournal.clerk.render.!eval-counter","nextjournal.clerk.render/!eval-counter","reagent.core.atom","p__77913","map__77915","nextjournal.clerk.render/render-notebook","_doc","xs","bundle?","css-class","toc","toc-visibility","with-let77918","reagent.ratom/with-let-values","temp__5757__auto__","reagent.ratom/*ratom-context*","c__64227__auto__","reagent.debug/has-console","reagent.debug/tracking","reagent.debug/track-console","js/console","init77919","p1__77908#","p1__77909#","res77922","local-storage-key","temp__5755__auto__","stored-open?","root-ref-fn","ref-fn","map__77933","md-toc","cljs.core._EQ_","and__4251__auto__","nextjournal.ui.components.navbar/toggle-button","nextjournal.ui.components.icon/menu","nextjournal.ui.components.navbar/panel","nextjournal.ui.components.navbar/navbar","or__4253__auto__","cljs.core.doall","cljs.core.map_indexed","idx","map__77934","viewer-name","nextjournal.clerk.viewer/->viewer","viewer-css-class","nextjournal.clerk.viewer/css-class","inner-viewer-name","G__77935","nextjournal.clerk.viewer/->value","cljs.core.concat","G__77936","cljs.core/PersistentVector","cljs.core/name","G__77937","cljs.core/Keyword","nextjournal.clerk.viewer/width","G__77938","nextjournal.clerk.render/inspect-presented","nextjournal.clerk.render/opts->query","opts","p1__77939#","cljs.core.map","cljs.core.update","cljs.core.partial","clojure.string/join","clojure.string.join","nextjournal.clerk.render/render-unreadable-edn","edn","var_args","args__4870__auto__","len__4864__auto__","i__4865__auto__","argseq__4871__auto__","cljs.core/IndexedSeq","nextjournal.clerk.render/error-badge","seq77940","self__4852__auto__","cljs.core/seq","cljs.core.into","nextjournal.clerk.render/error-view","error","!stack-expanded","nextjournal.clerk.render.hooks/use-state","temp__5753__auto__","data","nextjournal.clerk.render/inspect","stack","e77950","clojure.string/split-lines","cljs.core.drop","cljs.core.mapv","clojure.string/trim","js/Error","cljs.core/count","G__77953","obj77959","js/undefined","nextjournal.clerk.render/ErrorBoundary","js/module$node_modules$react$index.Component","props","self__","obj77958","hash","handle-error","this","map__77960","cljs.core.apply","cljs.core/hash-map","map__77961","obj77964","obj77966","map__77962","obj77967","obj77969","reagent.core.as_element","obj77970","state","obj77971","obj77976","obj77977","nextjournal.clerk.render/default-loading-view","nextjournal.clerk.render/read-string","s","js/nextjournal.clerk.sci_env.read-string","p__77980","map__77981","nextjournal.clerk.render/fetch!","blob-id","js/fetch","p1__77978#","p1__77979#","e77983","e","js/console.error","nextjournal.clerk.render/->expanded-at","auto-expand?","presented","G__77988","nextjournal.clerk.viewer/assign-content-lengths","nextjournal.clerk.viewer/assign-expanded-at","p__77992","p__77993","map__77994","map__77995","nextjournal.clerk.render/render-result","result","fetch-opts","auto-expand-results?","!desc","nextjournal.clerk.render.hooks/use-state-with-deps","!expanded-at","cljs.core/map?","fetch-fn","nextjournal.clerk.render.hooks.use_callback","more","nextjournal.clerk.viewer/merge-presentations","p1__77990#","cljs.core.merge","on-key-down","event","cljs.core/dissoc","on-key-up","p1__77991#","js/document","js/document.addEventListener","js/document.removeEventListener","nextjournal.view.context/provide","nextjournal.clerk.render/toggle-expanded","path","map__78004","hover-path","prompt-multi-expand?","hover-path-count","hover-path-expanded?","expanded-at","p__78013","vec__78015","cljs.core.nth","expanded?","cljs.core/coll?","cljs.core/vector?","cljs.core.assoc","cljs.core/update","nextjournal.clerk.render/expandable?","nextjournal.clerk.render/inspect-children","G__78020","G__78021","cljs.core.fnil","cljs.core/conj","nextjournal.clerk.render/expand-style","nextjournal.clerk.render/triangle","nextjournal.clerk.render/triangle-spacer","nextjournal.clerk.render/expand-button","opening-paren","map__78026","multi-expand?","p__78030","map__78031","nextjournal.clerk.render/render-coll","viewer","map__78032","closing-paren","cljs.core.comp","cljs.core.interpose","G__78033","cljs.core/list?","p__78034","map__78035","nextjournal.clerk.render/render-elision","total","offset","unbounded?","nextjournal.view.context/consume","cljs.core/fn?","p__78036","map__78037","nextjournal.clerk.render/render-map","map__78038","G__78039","p__78041","map__78043","nextjournal.clerk.render/render-string","p1__78040#","p__78045","map__78046","nextjournal.clerk.render/render-quoted-string","map__78047","p1__78044#","cljs.core/some","clojure.string/includes?","nextjournal.clerk.render/render-number","num","js/Number.isNaN","nextjournal.clerk.render/sort!","!sort","i","k","map__78048","sort-key","sort-order","cljs.core/reset!","p__78054","p__78055","map__78056","map__78057","nextjournal.clerk.render/sort-data","sort-index","head","rows","G__78058","p1__78049#","cljs.core.sort_by","G__78059","cljs.core/val","clojure.string/lower-case","p1__78050#","p2__78051#","p1__78053#","p2__78052#","cljs.core/compare","nextjournal.clerk.render/x-icon","nextjournal.clerk.render/check-icon","p__78060","vec__78061","nextjournal.clerk.render/render-table-error","p__78064","map__78065","nextjournal.clerk.render/throwable-view","via","trace","p__78066","map__78067","_ex","type","message","_trace","p__78068","vec__78069","call","_x","file","line","nextjournal.clerk.render/render-throwable","ex","G__78073","nextjournal.clerk.render/render-tagged-value","p__78074","map__78075","tag","value","nextjournal.clerk.render.render_tagged_value","space?","js/nextjournal.clerk.render.!doc","nextjournal.clerk.render/!doc","reagent.ratom.atom","js/nextjournal.clerk.render.!error","nextjournal.clerk.render/!error","js/nextjournal.clerk.render.!viewers","nextjournal.clerk.render/!viewers","nextjournal.clerk.viewer/!viewers","nextjournal.clerk.render/set-viewers!","scope","viewers","nextjournal.clerk.render/valid-react-element?","js/module$node_modules$react$index.isValidElement","G__78077","with-let78078","init78079","res78080","map__78083","cljs.core/peek","nextjournal.clerk.render/in-process-fetch","js/Promise","nextjournal.clerk.viewer.present","with-let78087","init78088","res78089","nextjournal.clerk.render/root","nextjournal.clerk.render/intern-atom!","var-name","sci.ctx-store/get-ctx","sci.core.intern","sci.core.create_ns","cljs.core.symbol","cljs.core/namespace","cljs.core/with-meta","js/nextjournal.clerk.render.!synced-atom-vars","nextjournal.clerk.render/!synced-atom-vars","cljs.core.atom","nextjournal.clerk.render/sci-ns-unmap!","ns-sym","var-sym","ns-unmap","sci.core/eval-string*","js/nextjournal.clerk.render.*reset-sync-atoms?*","nextjournal.clerk.render/*reset-sync-atoms?*","nextjournal.clerk.render/set-reset-sync-atoms!","new-val","nextjournal.clerk.render/intern-atoms!","atom-var-name->state","vars-in-use","cljs.core/keys","vars-interned","seq__78115","chunk__78116","count__78117","i__78118","cljs.core/chunked-seq?","c__4679__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/first","cljs.core/next","var-name-to-unmap","clojure.set.difference","seq__78147","chunk__78148","count__78149","i__78150","vec__78162","vec__78165","temp__5751__auto__","existing-var","sci.core/resolve","nextjournal.clerk.render/remount?","doc-or-patch","p1__78171#","cljs.core/tree-seq","nextjournal.clerk.render/re-eval-viewer-fns","doc","p1__78172#","re-eval","nextjournal.clerk.viewer/->viewer-fn","p1__78173#","clojure.walk/postwalk","G__78174","nextjournal.clerk.viewer/viewer-fn?","p__78178","map__78179","nextjournal.clerk.render/set-state!","cljs.core/contains?","cljs.core/inc","nextjournal.clerk.render/apply-patch","patch","editscript.core/patch","editscript.core/edits->script","p__78181","map__78182","nextjournal.clerk.render/patch-state!","p1__78180#","js/setTimeout","nextjournal.clerk.render/clerk-swap!","seq78183","G__78184","self__4851__auto__","atom","swap-args","cljs.core/swap!","cljs.core/meta","js/ws_send","cljs.core.pr_str","cljs.core/List","nextjournal.clerk.render/clerk-reset!","nextjournal.clerk.render.clerk_swap_BANG_","cljs.core/constantly","p__78188","map__78189","nextjournal.clerk.render/dispatch","msg","dispatch-fn","js/console.warn","js/nextjournal.clerk.render.react-root","nextjournal.clerk.render/react-root","el","js/document.getElementById","js/module$node_modules$react_dom$client.createRoot","nextjournal.clerk.render/mount","nextjournal.clerk.render/clerk-eval","form","goog/global","p__78193","map__78194","nextjournal.clerk.render/render-katex","tex-string","inline?","nextjournal.viewer.katex.to_html_string","nextjournal.clerk.render/html-render","markup","nextjournal.clerk.render/html-viewer","nextjournal.clerk.render/html","nextjournal.clerk.viewer/with-viewer","nextjournal.clerk.render/render-reagent","G__78200","nextjournal.clerk.render/reagent-viewer","p__78202","map__78205","nextjournal.clerk.render/with-d3-require","package","loading-view","f","nextjournal.clerk.render.hooks/use-d3-require","nextjournal.clerk.render/render-vega-lite","nextjournal.clerk.render.hooks/use-error-handler","vega-embed","p1__78206#","js/module$node_modules$react$index.useCallback","cljs.core/clj->js","cljs.core.dissoc","callback","nextjournal.clerk.render/render-plotly","plotly","p1__78209#","nextjournal.clerk.render/render-mathjax","nextjournal.viewer.mathjax/viewer","nextjournal.clerk.render/render-code","nextjournal.clerk.render.code/render-code","nextjournal.clerk.render/expand-icon","nextjournal.clerk.render/render-folded-code","code-string","!hidden?","p__78210","map__78211","nextjournal.clerk.render/url-for","src","nextjournal.clerk.render/consume-view-context"],"sourcesContent":["(ns nextjournal.clerk.render\n  (:require [\"react\" :as react]\n            [\"react-dom/client\" :as react-client]\n            [applied-science.js-interop :as j]\n            [cljs.reader]\n            [clojure.set :as set]\n            [clojure.string :as str]\n            [clojure.walk :as w]\n            [editscript.core :as editscript]\n            [goog.object]\n            [goog.string :as gstring]\n            [nextjournal.clerk.render.code :as code]\n            [nextjournal.clerk.render.hooks :as hooks]\n            [nextjournal.clerk.viewer :as viewer]\n            [nextjournal.markdown.transform :as md.transform]\n            [nextjournal.ui.components.icon :as icon]\n            [nextjournal.ui.components.motion :as motion]\n            [nextjournal.ui.components.navbar :as navbar]\n            [nextjournal.view.context :as view-context]\n            [nextjournal.viewer.katex :as katex]\n            [nextjournal.viewer.mathjax :as mathjax]\n            [reagent.core :as r]\n            [reagent.ratom :as ratom]\n            [sci.core :as sci]\n            [sci.ctx-store]\n            [shadow.cljs.modern :refer [defclass]]))\n\n(r/set-default-compiler! (r/create-compiler {:function-components true}))\n\n(declare inspect inspect-presented reagent-viewer html html-viewer)\n\n(def nbsp (gstring/unescapeEntities \"&nbsp;\"))\n\n(defn reagent-atom? [x]\n  (satisfies? ratom/IReactiveAtom x))\n\n(defn toc-items [items]\n  (reduce\n   (fn [acc {:as item :keys [content children]}]\n     (if content\n       (let [title (md.transform/->text item)]\n         (->> {:title title\n               :path (str \"#\" (viewer/->slug title))\n               :items (toc-items children)}\n              (conj acc)\n              vec))\n       (toc-items (:children item))))\n   []\n   items))\n\n(defn dark-mode-toggle [!state]\n  (let [{:keys [dark-mode?]} @!state\n        spring {:type :spring :stiffness 200 :damping 10}]\n    [:div.relative.dark-mode-toggle\n     [:button.text-slate-400.hover:text-slate-600.dark:hover:text-white.cursor-pointer\n      {:on-click #(swap! !state assoc :dark-mode? (not dark-mode?))}\n      (if dark-mode?\n        [:> motion/svg\n         {:xmlns \"http://www.w3.org/2000/svg\"\n          :class \"w-5 h-5 md:w-4 md:h-4\"\n          :viewBox \"0 0 50 50\"\n          :key \"moon\"}\n         [:> motion/path\n          {:d \"M 43.81 29.354 C 43.688 28.958 43.413 28.626 43.046 28.432 C 42.679 28.238 42.251 28.198 41.854 28.321 C 36.161 29.886 30.067 28.272 25.894 24.096 C 21.722 19.92 20.113 13.824 21.683 8.133 C 21.848 7.582 21.697 6.985 21.29 6.578 C 20.884 6.172 20.287 6.022 19.736 6.187 C 10.659 8.728 4.691 17.389 5.55 26.776 C 6.408 36.163 13.847 43.598 23.235 44.451 C 32.622 45.304 41.28 39.332 43.816 30.253 C 43.902 29.96 43.9 29.647 43.81 29.354 Z\"\n           :fill \"currentColor\"\n           :initial \"initial\"\n           :animate \"animate\"\n           :variants {:initial {:scale 0.6 :rotate 90}\n                      :animate {:scale 1 :rotate 0 :transition spring}}}]]\n        [:> motion/svg\n         {:key \"sun\"\n          :class \"w-5 h-5 md:w-4 md:h-4\"\n          :viewBox \"0 0 24 24\"\n          :fill \"none\"\n          :xmlns \"http://www.w3.org/2000/svg\"}\n         [:> motion/circle\n          {:cx \"11.9998\"\n           :cy \"11.9998\"\n           :r \"5.75375\"\n           :fill \"currentColor\"\n           :initial \"initial\"\n           :animate \"animate\"\n           :variants {:initial {:scale 1.5}\n                      :animate {:scale 1 :transition spring}}}]\n         [:> motion/g\n          {:initial \"initial\"\n           :animate \"animate\"\n           :variants {:initial {:rotate 45}\n                      :animate {:rotate 0 :transition spring}}}\n          [:circle {:cx \"3.08982\" :cy \"6.85502\" :r \"1.71143\" :transform \"rotate(-60 3.08982 6.85502)\" :fill \"currentColor\"}]\n          [:circle {:cx \"3.0903\" :cy \"17.1436\" :r \"1.71143\" :transform \"rotate(-120 3.0903 17.1436)\" :fill \"currentColor\"}]\n          [:circle {:cx \"12\" :cy \"22.2881\" :r \"1.71143\" :fill \"currentColor\"}]\n          [:circle {:cx \"20.9101\" :cy \"17.1436\" :r \"1.71143\" :transform \"rotate(-60 20.9101 17.1436)\" :fill \"currentColor\"}]\n          [:circle {:cx \"20.9101\" :cy \"6.8555\" :r \"1.71143\" :transform \"rotate(-120 20.9101 6.8555)\" :fill \"currentColor\"}]\n          [:circle {:cx \"12\" :cy \"1.71143\" :r \"1.71143\" :fill \"currentColor\"}]]])]]))\n\n\n(defn localstorage-set! [key val]\n  (when (exists? js/window)\n    (.setItem (.-localStorage js/window) key val)))\n\n(defn localstorage-get [key]\n  (when (exists? js/window)\n    (cljs.reader/read-string (.getItem (.-localStorage js/window) key))))\n\n\n(def local-storage-dark-mode-key \"clerk-darkmode\")\n\n(defn set-dark-mode! [dark-mode?]\n  (let [class-list (.-classList (js/document.querySelector \"html\"))]\n    (if dark-mode?\n      (.add class-list \"dark\")\n      (.remove class-list \"dark\")))\n  (localstorage-set! local-storage-dark-mode-key dark-mode?))\n\n(defn setup-dark-mode! [!state]\n  (let [{:keys [dark-mode?]} @!state]\n    (add-watch !state ::dark-mode\n               (fn [_ _ old {:keys [dark-mode?]}]\n                 (when (not= (:dark-mode? old) dark-mode?)\n                   (set-dark-mode! dark-mode?))))\n    (when dark-mode?\n      (set-dark-mode! dark-mode?))))\n\n(defonce !eval-counter (r/atom 0))\n\n(defn render-notebook [{:as _doc xs :blocks :keys [bundle? css-class toc toc-visibility]}]\n  (r/with-let [local-storage-key \"clerk-navbar\"\n               !state (r/atom {:toc (toc-items (:children toc))\n                               :md-toc toc\n                               :dark-mode? (localstorage-get local-storage-dark-mode-key)\n                               :theme {:slide-over \"bg-slate-100 dark:bg-gray-800 font-sans border-r dark:border-slate-900\"}\n                               :width 220\n                               :mobile-width 300\n                               :local-storage-key local-storage-key\n                               :set-hash? (not bundle?)\n                               :open? (if-some [stored-open? (localstorage-get local-storage-key)]\n                                        stored-open?\n                                        (not= :collapsed toc-visibility))})\n               root-ref-fn #(when % (setup-dark-mode! !state))\n               ref-fn #(when % (swap! !state assoc :scroll-el %))]\n    (let [{:keys [md-toc]} @!state]\n      (when-not (= md-toc toc)\n        (swap! !state assoc :toc (toc-items (:children toc)) :md-toc toc :open? (not= :collapsed toc-visibility)))\n      [:div.flex\n       {:ref root-ref-fn}\n       [:div.fixed.top-2.left-2.md:left-auto.md:right-2.z-10\n        [dark-mode-toggle !state]]\n       (when (and toc toc-visibility)\n         [:<>\n          [navbar/toggle-button !state\n           [:<>\n            [icon/menu {:size 20}]\n            [:span.uppercase.tracking-wider.ml-1.font-bold\n             {:class \"text-[12px]\"} \"ToC\"]]\n           {:class \"z-10 fixed right-2 top-2 md:right-auto md:left-3 md:top-3 text-slate-400 font-sans text-xs hover:underline cursor-pointer flex items-center bg-white dark:bg-gray-900 py-1 px-3 md:p-0 rounded-full md:rounded-none border md:border-0 border-slate-200 dark:border-gray-500 shadow md:shadow-none dark:text-slate-400 dark:hover:text-white\"}]\n          [navbar/panel !state [navbar/navbar !state]]])\n       [:div.flex-auto.h-screen.overflow-y-auto.scroll-container\n        {:ref ref-fn}\n        [:div {:class (or css-class \"flex flex-col items-center viewer-notebook flex-auto\")}\n         (doall\n          (map-indexed (fn [idx x]\n                         (let [{viewer-name :name} (viewer/->viewer x)\n                               viewer-css-class (viewer/css-class x)\n                               inner-viewer-name (some-> x viewer/->value viewer/->viewer :name)]\n                           ^{:key (str idx \"-\" @!eval-counter)}\n                           [:div {:class (concat\n                                          [(when (:nextjournal/open-graph-image-capture (viewer/->value x)) \"open-graph-image-capture\")]\n                                          (if viewer-css-class\n                                            (cond-> viewer-css-class\n                                              (string? viewer-css-class) vector)\n                                            [\"viewer\"\n                                             (when viewer-name (str \"viewer-\" (name viewer-name)))\n                                             (when inner-viewer-name (str \"viewer-\" (name inner-viewer-name)))\n                                             (case (or (viewer/width x) (case viewer-name (:code :code-folded) :wide :prose))\n                                               :wide \"w-full max-w-wide\"\n                                               :full \"w-full\"\n                                               \"w-full max-w-prose px-8\")]))}\n                            [inspect-presented x]]))\n                       xs))]]])))\n\n(defn opts->query [opts]\n  (->> opts\n       (map #(update % 0 name))\n       (map (partial str/join \"=\"))\n       (str/join \"&\")))\n\n\n#_(opts->query {:s 12 :num 42})\n\n\n\n(defn render-unreadable-edn [edn]\n  [:span.inspected-value.whitespace-nowrap.cmt-default edn])\n\n(defn error-badge [& content]\n  [:div.bg-red-50.rounded-sm.text-xs.text-red-400.px-2.py-1.items-center.sans-serif.inline-flex\n   [:svg.h-4.w-4.text-red-400 {:xmlns \"http://www.w3.org/2000/svg\" :viewBox \"0 0 20 20\" :fill \"currentColor\" :aria-hidden \"true\"}\n    [:path {:fill-rule \"evenodd\" :d \"M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z\" :clip-rule \"evenodd\"}]]\n   (into [:div.ml-2.font-bold] content)])\n\n(defn error-view [error]\n  (let [!stack-expanded (hooks/use-state false)]\n    [:div.bg-red-100.dark:bg-gray-800.px-6.py-4.rounded-md.text-xs.dark:border-2.dark:border-red-300.not-prose\n     [:p.font-mono.text-red-600.dark:text-red-300.font-bold (or (:message error) (.-message error))]\n     (when-let [data (or (:data error) (.-data error))]\n       [:div.mt-2.overflow-auto [inspect data]])\n     (when-let [stack (try\n                        (->> (or (:stack error) (.-stack error))\n                             str/split-lines\n                             (drop 1)\n                             (mapv str/trim))\n                        (catch js/Error _ nil))]\n       [:pre.text-red-600.dark:text-red-300.w-full.overflow-auto.mt-2 {:class \"text-[11px] max-h-[155px]\"}\n        [:span.underline.cursor-pointer {:on-click #(swap! !stack-expanded not)}\n         (if @!stack-expanded \"Hide\" \"Show\")\n         \" Stacktrace (\" (count stack) \" lines)\\n\"]\n        (when @!stack-expanded\n          (str/join \"\\n\" stack))])]))\n\n\n(defclass ErrorBoundary\n  (extends react/Component)\n  (field handle-error)\n  (field hash)\n  (constructor [this ^js props]\n               (super props)\n               (set! (.-state this) #js {:error nil :hash (j/get props :hash)})\n               (set! hash (j/get props :hash))\n               (set! handle-error (fn [error]\n                                    (set! (.-state this) #js {:error error}))))\n\n  Object\n  (render [this ^js props]\n          (j/let [^js {{:keys [error]} :state\n                       {:keys [children]} :props} this]\n            (if error\n              (r/as-element [error-view error])\n              children))))\n\n(j/!set ErrorBoundary\n        :getDerivedStateFromError (fn [error] #js {:error error})\n        :getDerivedStateFromProps (fn [props state]\n                                    (when (not= (j/get props :hash)\n                                                (j/get state :hash))\n                                      #js {:hash (j/get props :hash) :error nil})))\n\n\n(def default-loading-view \"Loading...\")\n\n;; TODO: drop this\n(defn read-string [s]\n  (js/nextjournal.clerk.sci_env.read-string s))\n\n\n(defn fetch! [{:keys [blob-id]} opts]\n  #_(js/console.log :fetch! blob-id opts)\n  (-> (js/fetch (str \"_blob/\" blob-id (when (seq opts)\n                                        (str \"?\" (opts->query opts)))))\n      (.then #(.text %))\n      (.then #(try (read-string %)\n                   (catch js/Error e\n                     (js/console.error #js {:message \"sci read error\" :blob-id blob-id :code-string % :error e })\n                     (render-unreadable-edn %))))))\n\n(defn ->expanded-at [auto-expand? presented]\n  (cond-> presented\n    auto-expand? (-> viewer/assign-content-lengths)\n    true (-> viewer/assign-expanded-at (get :nextjournal/expanded-at {}))))\n\n(defn render-result [{:as result :nextjournal/keys [fetch-opts hash presented]} {:as opts :keys [auto-expand-results?]}]\n  (let [!desc (hooks/use-state-with-deps presented [hash])\n        !expanded-at (hooks/use-state (when (map? @!desc)\n                                        (->expanded-at auto-expand-results? @!desc)))\n        fetch-fn (hooks/use-callback (when fetch-opts\n                                       (fn [opts]\n                                         (.then (fetch! fetch-opts opts)\n                                                (fn [more]\n                                                  (swap! !desc viewer/merge-presentations more opts)\n                                                  (swap! !expanded-at #(merge (->expanded-at auto-expand-results? @!desc) %))))))\n                                     [hash])\n        on-key-down (hooks/use-callback (fn [event]\n                                          (if (.-altKey event)\n                                            (swap! !expanded-at assoc :prompt-multi-expand? true)\n                                            (swap! !expanded-at dissoc :prompt-multi-expand?))))\n        on-key-up (hooks/use-callback #(swap! !expanded-at dissoc :prompt-multi-expand?))\n        ref-fn (hooks/use-callback #(if %\n                                      (when (exists? js/document)\n                                        (js/document.addEventListener \"keydown\" on-key-down)\n                                        (js/document.addEventListener \"keyup\" on-key-up))\n                                      (when (exists? js/document)\n                                        (js/document.removeEventListener \"keydown\" on-key-down)\n                                        (js/document.removeEventListener \"up\" on-key-up))))]\n    (when @!desc\n      [view-context/provide {:fetch-fn fetch-fn}\n       [:> ErrorBoundary {:hash hash}\n        [:div.relative\n         [:div.overflow-y-hidden\n          {:ref ref-fn}\n          [inspect-presented {:!expanded-at !expanded-at} @!desc]]]]])))\n\n(defn toggle-expanded [!expanded-at path event]\n  (.preventDefault event)\n  (.stopPropagation event)\n  (let [{:keys [hover-path prompt-multi-expand?]} @!expanded-at\n        hover-path-count (count hover-path)\n        hover-path-expanded? (get @!expanded-at path)]\n    (if (and hover-path prompt-multi-expand? (= (count path) hover-path-count))\n      (swap! !expanded-at (fn [expanded-at]\n                            (reduce\n                             (fn [acc [path expanded?]]\n                               (if (and (coll? path) (vector? path) (= (count path) hover-path-count))\n                                 (assoc acc path (not hover-path-expanded?))\n                                 (assoc acc path expanded?)))\n                             {}\n                             expanded-at)))\n      (swap! !expanded-at update path not))))\n\n\n(defn expandable? [xs]\n  (< 1 (count xs)))\n\n\n(defn inspect-children [opts]\n  ;; TODO: move update function onto viewer\n  (map-indexed (fn [idx x]\n                 (inspect-presented (update opts :path (fnil conj []) idx) x))))\n\n(def expand-style\n  [\"cursor-pointer\"\n   \"bg-indigo-50\"\n   \"hover:bg-indigo-100\"\n   \"border-b\"\n   \"border-gray-400\"\n   \"hover:border-gray-500\"\n   \"dark:bg-gray-900\"\n   \"dark:hover:bg-slate-700\"\n   \"dark:border-slate-600\"\n   \"dark:hover:border-slate-500\"])\n\n(defn triangle [expanded?]\n  [:svg {:viewBox \"0 0 100 100\"\n         :class (str \"w-[7px] h-[7px] fill-current inline-block transition-all mr-[1px] -mt-[2px] \"\n                     (if expanded? \"rotate-180\" \"rotate-90\"))}\n   [:polygon {:points \"5.9,88.2 50,11.8 94.1,88.2 \"}]])\n\n(def triangle-spacer [:span {:class \"inline-block w-[8px]\"}])\n\n(defn expand-button [!expanded-at opening-paren path]\n  (let [expanded? (get @!expanded-at path)\n        {:keys [hover-path prompt-multi-expand?]} @!expanded-at\n        multi-expand? (and hover-path prompt-multi-expand? (= (count path) (count hover-path)))]\n    [:span.group.hover:bg-indigo-100.rounded-sm.hover:shadow.cursor-pointer\n     {:class (when multi-expand? \"bg-indigo-100 shadow \")\n      :on-click (partial toggle-expanded !expanded-at path)\n      :on-mouse-enter #(swap! !expanded-at assoc :hover-path path)\n      :on-mouse-leave #(swap! !expanded-at dissoc :hover-path)}\n     [:span.text-slate-400.group-hover:text-indigo-700\n      {:class (when multi-expand? \"text-indigo-700 \")}\n      [triangle expanded?]]\n     [:span.group-hover:text-indigo-700 opening-paren]]))\n\n(defn render-coll [xs {:as opts :keys [path viewer !expanded-at] :or {path []}}]\n  (let [expanded? (get @!expanded-at path)\n        {:keys [opening-paren closing-paren]} viewer]\n    [:span.inspected-value.whitespace-nowrap\n     {:class (when expanded? \"inline-flex\")}\n     [:span\n      (if (< 1 (count xs))\n        [expand-button !expanded-at opening-paren path]\n        [:span opening-paren])\n      (into [:<>]\n            (comp (inspect-children opts)\n                  (interpose (if expanded? [:<> [:br] triangle-spacer nbsp (when (= 2 (count opening-paren)) nbsp)] \" \")))\n            xs)\n      [:span\n       (cond->> closing-paren (list? closing-paren) (into [:<>]))]]]))\n\n(defn render-elision [{:as fetch-opts :keys [total offset unbounded?]} _]\n  [view-context/consume :fetch-fn\n   (fn [fetch-fn]\n     [:span.sans-serif.relative.whitespace-nowrap\n      {:style {:border-radius 2 :padding (when (fn? fetch-fn) \"1px 3px\") :font-size 11 :top -1}\n       :class (if (fn? fetch-fn)\n                \"cursor-pointer bg-indigo-200 hover:bg-indigo-300 dark:bg-gray-700 dark:hover:bg-slate-600 text-gray-900 dark:text-white\"\n                \"text-gray-400 dark:text-slate-300\")\n       :on-click #(when (fn? fetch-fn)\n                    (fetch-fn fetch-opts))} (- total offset) (when unbounded? \"+\") (if (fn? fetch-fn) \" more\u2026\" \" more elided\")])])\n\n(defn render-map [xs {:as opts :keys [path viewer !expanded-at] :or {path []}}]\n  (let [expanded? (get @!expanded-at path)\n        {:keys [closing-paren]} viewer]\n    [:span.inspected-value.whitespace-nowrap\n     {:class (when expanded? \"inline-flex\")}\n     [:span\n      (if (expandable? xs)\n        [expand-button !expanded-at \"{\" path]\n        [:span \"{\"])\n      (into [:<>]\n            (comp (inspect-children opts)\n                  (interpose (if expanded? [:<> [:br] triangle-spacer nbsp #_(repeat (inc (count path)) nbsp)] \" \")))\n            xs)\n      (cond->> closing-paren (list? closing-paren) (into [:<>]))]]))\n\n\n(defn render-string [s {:as opts :keys [path !expanded-at] :or {path []}}]\n  (let [expanded? (get @!expanded-at path)]\n    (into [:span]\n          (map #(if (string? %)\n                  (if expanded?\n                    (into [:<>] (interpose [:<> [:br]] (str/split-lines %)))\n                    (into [:<>] (interpose [:span.text-slate-400 \"\u21a9\ufe0e\"] (str/split-lines %))))\n                  (inspect-presented opts %)))\n          (if (string? s) [s] s))))\n\n(defn render-quoted-string [s {:as opts :keys [path viewer !expanded-at] :or {path []}}]\n  (let [{:keys [closing-paren]} viewer]\n    [:span.cmt-string.inspected-value.whitespace-nowrap.inline-flex\n     [:span\n      (if (some #(and (string? %) (str/includes? % \"\\n\")) (if (string? s) [s] s))\n        [expand-button !expanded-at \"\\\"\" path]\n        [:span \"\\\"\"])]\n     [:div\n      (viewer/->value (render-string s opts))\n      \"\\\"\"\n      closing-paren]]))\n\n(defn render-number [num]\n  [:span.cmt-number.inspected-value\n   (if (js/Number.isNaN num) \"NaN\" (str num))])\n\n(defn sort! [!sort i k]\n  (let [{:keys [sort-key sort-order]} @!sort]\n    (reset! !sort {:sort-index i\n                   :sort-key k\n                   :sort-order (if (= sort-key k) (if (= sort-order :asc) :desc :asc) :asc)})))\n\n(defn sort-data [{:keys [sort-index sort-order]} {:as data :keys [head rows]}]\n  (cond-> data\n    head (assoc :rows (->> rows\n                           (sort-by #(cond-> (get % sort-index)\n                                       (string? val) str/lower-case)\n                                    (if (= sort-order :asc) #(compare %1 %2) #(compare %2 %1)))\n                           vec))))\n\n(def x-icon\n  [:svg.h-4.w-4 {:xmlns \"http://www.w3.org/2000/svg\" :viewBox \"0 0 20 20\" :fill \"currentColor\"}\n   [:path {:fill-rule \"evenodd\" :d \"M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z\" :clip-rule \"evenodd\"}]])\n\n(def check-icon\n  [:svg.h-4.w-4 {:xmlns \"http://www.w3.org/2000/svg\" :viewBox \"0 0 20 20\" :fill \"currentColor\"}\n   [:path {:fill-rule \"evenodd\" :d \"M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z\" :clip-rule \"evenodd\"}]])\n\n(defn render-table-error [[data]]\n  ;; currently boxing the value in a vector to retain the type info\n  ;; TODO: find a better way to do this\n  [:div.bg-red-100.dark:bg-gray-800.px-6.py-4.rounded-md.text-xs.dark:border-2.dark:border-red-400.not-prose\n   [:h4.mt-0.uppercase.text-xs.dark:text-red-400.tracking-wide \"Table Error\"]\n   [:p.mt-4.font-medium \"Clerk\u2019s table viewer does not recognize the format of your data:\"]\n   [:div.mt-2.flex\n    [:div.text-red-500.mr-2 x-icon]\n    [inspect-presented data]]\n   [:p.mt-4.font-medium \"Currently, the following formats are supported:\"]\n   [:div.mt-2.flex.items-center\n    [:div.text-green-500.mr-2 check-icon]\n    [inspect {:column-1 [1 2]\n              :column-2 [3 4]}]]\n   [:div.mt-2.flex.items-center\n    [:div.text-green-500.mr-2 check-icon]\n    [inspect [{:column-1 1 :column-2 3} {:column-1 2 :column-2 4}]]]\n   [:div.mt-2.flex.items-center\n    [:div.text-green-500.mr-2 check-icon]\n    [inspect [[1 3] [2 4]]]]\n   [:div.mt-2.flex.items-center\n    [:div.text-green-500.mr-2 check-icon]\n    [inspect {:head [:column-1 :column-2]\n              :rows [[1 3] [2 4]]}]]])\n\n\n(defn throwable-view [{:keys [via trace]}]\n  [:div.bg-white.max-w-6xl.mx-auto.text-xs.monospace.not-prose\n   (into\n    [:div]\n    (map\n     (fn [{:as _ex :keys [type message data _trace]}]\n       [:div.p-4.bg-red-100.border-b.border-b-gray-300\n        (when type\n          [:div.font-bold \"Unhandled \" type])\n        [:div.font-bold.mt-1 message]\n        (when data\n          [:div.mt-1 [inspect data]])])\n     via))\n   [:div.py-6.overflow-x-auto\n    [:table.w-full\n     (into [:tbody]\n           (map (fn [[call _x file line]]\n                  [:tr.hover:bg-red-100.leading-tight\n                   [:td.text-right.px-6 file \":\"]\n                   [:td.text-right.pr-6 line]\n                   [:td.py-1.pr-6 call]]))\n           trace)]]])\n\n(defn render-throwable [ex]\n  (if (or (:stack ex) (instance? js/Error ex))\n    [error-view ex]\n    [throwable-view ex]))\n\n(defn render-tagged-value\n  ([tag value] (render-tagged-value {:space? true} tag value))\n  ([{:keys [space?]} tag value]\n   [:span.inspected-value.whitespace-nowrap\n    [:span.cmt-meta tag] (when space? nbsp) value]))\n\n(defonce !doc (ratom/atom nil))\n(defonce !error (ratom/atom nil))\n(defonce !viewers viewer/!viewers)\n\n(defn set-viewers! [scope viewers]\n  #_(js/console.log :set-viewers! {:scope scope :viewers viewers})\n  (swap! !viewers assoc scope (vec viewers))\n  'set-viewers!)\n\n(declare default-viewers)\n\n(defn valid-react-element? [x] (react/isValidElement x))\n\n(defn inspect-presented\n  ([x]\n   (r/with-let [!expanded-at (r/atom (:nextjournal/expanded-at x))]\n     [inspect-presented {:!expanded-at !expanded-at} x]))\n  ([opts x]\n   (if (valid-react-element? x)\n     x\n     (let [{:nextjournal/keys [value viewer]} x]\n       #_(prn :inspect-presented value :valid-element? (react/isValidElement value) :viewer viewer)\n       ;; each view function must be called in its own 'functional component' so that it gets its own hook state.\n       ^{:key (str (:hash viewer) \"@\" (peek (:path opts)))}\n       [(:render-fn viewer) value (merge opts (:nextjournal/opts x) {:viewer viewer})]))))\n\n(defn in-process-fetch [value opts]\n  (.resolve js/Promise (viewer/present value opts)))\n\n(defn inspect [value]\n  (r/with-let [!state (r/atom nil)]\n    (when (not= (:value @!state ::not-found) value)\n      (swap! !state assoc :value value :desc (viewer/present value)))\n    [view-context/provide {:fetch-fn (fn [fetch-opts]\n                                       (.then (in-process-fetch value fetch-opts)\n                                              (fn [more]\n                                                (swap! !state update :desc viewer/merge-presentations more fetch-opts))))}\n     [inspect-presented (:desc @!state)]]))\n\n(defn root []\n  [:<>\n   [inspect-presented @!doc]\n   (when @!error\n     [:div.fixed.top-0.left-0.w-full.h-full\n      [inspect-presented @!error]])])\n\n(declare mount)\n\n(defn intern-atom! [var-name state]\n  (assert (sci.ctx-store/get-ctx) \"sci-ctx must be set\")\n  (sci/intern (sci.ctx-store/get-ctx)\n              (sci/create-ns (symbol (namespace var-name)))\n              (symbol (name var-name))\n              (with-meta (r/atom state)\n                {:var-name var-name})))\n\n(defonce ^:private !synced-atom-vars\n  (atom #{}))\n\n(defn sci-ns-unmap! [ns-sym var-sym]\n  (let [ns-unmap (sci/eval-string* (sci.ctx-store/get-ctx) \"ns-unmap\")]\n    (ns-unmap ns-sym var-sym)))\n\n(defonce ^:dynamic *reset-sync-atoms?* true)\n(defn set-reset-sync-atoms! [new-val] (set! *reset-sync-atoms?* new-val))\n\n(defn intern-atoms! [atom-var-name->state]\n  (let [vars-in-use (into #{} (keys atom-var-name->state))\n        vars-interned @!synced-atom-vars]\n    (doseq [var-name-to-unmap (set/difference vars-interned vars-in-use)]\n      (sci-ns-unmap! (symbol (namespace var-name-to-unmap)) (symbol (name var-name-to-unmap))))\n    (doseq [[var-name value] atom-var-name->state]\n      (if-let [existing-var (sci/resolve (sci.ctx-store/get-ctx) var-name)]\n        (when *reset-sync-atoms?*\n          (reset! @existing-var value))\n        (intern-atom! var-name value)))\n    (reset! !synced-atom-vars vars-in-use)))\n\n(defn remount? [doc-or-patch]\n  (true? (some #(= % :nextjournal.clerk/remount) (tree-seq coll? seq doc-or-patch))))\n\n(defn re-eval-viewer-fns [doc]\n  (let [re-eval #(viewer/->viewer-fn (:form %))]\n    (w/postwalk #(cond-> % (viewer/viewer-fn? %) re-eval) doc)))\n\n(defn ^:export set-state! [{:as state :keys [doc error]}]\n  (when (contains? state :doc)\n    (reset! !doc doc))\n  (when (remount? doc)\n    (swap! !eval-counter inc))\n  (reset! !error error)\n  (when-let [title (and (exists? js/document) (-> doc viewer/->value :title))]\n    (set! (.-title js/document) title)))\n\n(defn apply-patch [x patch]\n  (editscript/patch x (editscript/edits->script patch)))\n\n(defn patch-state! [{:keys [patch]}]\n  (reset! !error nil)\n  (if (remount? patch)\n    (do (swap! !doc #(re-eval-viewer-fns (apply-patch % patch)))\n        ;; TODO: figure out why it doesn't work without `js/setTimeout`\n        (js/setTimeout #(swap! !eval-counter inc) 10))\n    (swap! !doc apply-patch patch)))\n\n(defn clerk-swap! [atom & swap-args]\n  (let [new-val (apply swap! atom swap-args)]\n    (when-let [var-name (-> atom meta :var-name)]\n      ;; TODO: for now sending whole state but could also diff\n      (js/ws_send (pr-str {:type :swap! :var-name var-name :args [(list 'fn ['_] (list 'quote new-val))]})))\n    new-val))\n\n(defn clerk-reset! [atom new-val]\n  (clerk-swap! atom (constantly new-val))\n  new-val)\n\n(defn ^:export dispatch [{:as msg :keys [type]}]\n  (let [dispatch-fn (get {:patch-state! patch-state!\n                          :set-state! set-state!}\n                         type\n                         (fn [_]\n                           (js/console.warn (str \"no on-message dispatch for type `\" type \"`\"))))]\n    #_(js/console.log :<= type := msg)\n    (dispatch-fn msg)))\n\n(defonce react-root\n  (when-let [el (and (exists? js/document) (js/document.getElementById \"clerk\"))]\n    (react-client/createRoot el)))\n\n(defn ^:export ^:dev/after-load mount []\n  (when react-root\n    (.render react-root (r/as-element [root]))))\n\n(defn clerk-eval [form]\n  (.ws_send ^js goog/global (pr-str {:type :eval :form form})))\n\n(defn render-katex [tex-string {:keys [inline?]}]\n  [:span {:dangerouslySetInnerHTML {:__html (katex/to-html-string tex-string (j/obj :displayMode (not inline?)))}}])\n\n(defn html-render [markup]\n  (r/as-element\n   (if (string? markup)\n     [:span {:dangerouslySetInnerHTML {:__html markup}}]\n     markup)))\n\n(def html-viewer\n  {:render-fn html-render})\n\n(def html\n  (partial viewer/with-viewer html-viewer))\n\n(defn render-reagent [x]\n  (r/as-element (cond-> x (fn? x) vector)))\n\n;; TODO: remove\n(def reagent-viewer render-reagent)\n\n\n(defn with-d3-require [{:keys [package loading-view]\n                        :or {loading-view default-loading-view}} f]\n  (if-let [package (hooks/use-d3-require package)]\n    (f package)\n    loading-view))\n\n(defn render-vega-lite [value]\n  (let [handle-error (hooks/use-error-handler)\n        vega-embed (hooks/use-d3-require \"vega-embed@6.11.1\")\n        opts (get value :embed/opts {})\n        ref-fn (react/useCallback #(when %\n                                     (-> (.embed vega-embed\n                                                 %\n                                                 (clj->js (dissoc value :embed/opts :embed/callback))\n                                                 (clj->js opts))\n                                         (.then (fn [result] (if-let [callback (:embed/callback value)]\n                                                               (callback result)\n                                                               result)))\n                                         (.catch handle-error)))\n                                  #js[value vega-embed])]\n    (when value\n      (if vega-embed\n        [:div.overflow-x-auto\n         [:div.vega-lite {:ref ref-fn}]]\n        default-loading-view))))\n\n(defn render-plotly [value]\n  (let [plotly (hooks/use-d3-require \"plotly.js-dist@2.15.1\")\n        ref-fn (react/useCallback #(when %\n                                     (.newPlot plotly % (clj->js value)))\n                                  #js[value plotly])]\n    (when value\n      (if plotly\n        [:div.overflow-x-auto\n         [:div.plotly {:ref ref-fn}]]\n        default-loading-view))))\n\n(def render-mathjax mathjax/viewer)\n\n(def render-code code/render-code)\n\n(def expand-icon\n  [:svg {:xmlns \"http://www.w3.org/2000/svg\" :viewBox \"0 0 20 20\" :fill \"currentColor\" :width 12 :height 12}\n   [:path {:fill-rule \"evenodd\" :d \"M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z\" :clip-rule \"evenodd\"}]])\n\n(defn render-folded-code [code-string]\n  (let [!hidden? (hooks/use-state true)]\n    (if @!hidden?\n      [:div.relative.pl-12.font-sans.text-slate-400.cursor-pointer.flex.overflow-y-hidden.group\n       [:span.hover:text-slate-500\n        {:class \"text-[10px]\"\n         :on-click #(swap! !hidden? not)}\n        \"show code\"]\n       #_#_#_[:span.ml-4.opacity-0.translate-y-full.group-hover:opacity-100.group-hover:translate-y-0.transition-all.hover:text-slate-500\n              {:class \"text-[10px]\"}\n              \"hide result\"]\n       [:span.ml-4.opacity-0.translate-y-full.group-hover:opacity-100.group-hover:translate-y-0.transition-all.delay-75.hover:text-slate-500\n        {:class \"text-[10px]\"}\n        \"cached in memory\"]\n       [:span.ml-4.opacity-0.translate-y-full.group-hover:opacity-100.group-hover:translate-y-0.transition-all.delay-150.hover:text-slate-500\n        {:class \"text-[10px]\"}\n        \"evaluated in 0.2s\"]]\n      [:<>\n       [:div.relative.pl-12.font-sans.text-slate-400.cursor-pointer.flex.overflow-y-hidden.group.mb-1\n        [:span.hover:text-slate-500\n         {:class \"text-[10px]\"\n          :on-click #(swap! !hidden? not)}\n         \"hide code\"]\n        #_#_#_[:span.ml-4.opacity-0.translate-y-full.group-hover:opacity-100.group-hover:translate-y-0.transition-all.hover:text-slate-500\n               {:class \"text-[10px]\"}\n               \"hide result\"]\n        [:span.ml-4.opacity-0.translate-y-full.group-hover:opacity-100.group-hover:translate-y-0.transition-all.delay-75.hover:text-slate-500\n         {:class \"text-[10px]\"}\n         \"cached in memory\"]\n        [:span.ml-4.opacity-0.translate-y-full.group-hover:opacity-100.group-hover:translate-y-0.transition-all.delay-150.hover:text-slate-500\n         {:class \"text-[10px]\"}\n         \"evaluated in 0.2s\"]]\n       [:div.viewer-code.mb-2.relative {:style {:margin-top 0}}\n        [render-code code-string]]])))\n\n\n(defn url-for [{:as src :keys [blob-id]}]\n  (if (string? src)\n    src\n    (str \"/_blob/\" blob-id (when-let [opts (seq (dissoc src :blob-id))]\n                             (str \"?\" (opts->query opts))))))\n\n(def consume-view-context view-context/consume)\n"]}